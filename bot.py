
import logging
import openai
from openai import AsyncOpenAI
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils import executor
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters import Command
from PIL import Image
import io
import os
from dotenv import load_dotenv
import base64
import random
import re
from unicodedata import normalize as uni_normalize
from datetime import datetime, timedelta, date, timezone
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy import Column, Integer, String, Float, DateTime, JSON, Boolean, Text, select, delete
from sqlalchemy import text
from sqlalchemy.orm import declarative_base
from collections import OrderedDict
from sqlalchemy import delete
from aiogram.dispatcher.filters import BoundFilter
from aiogram import types
# üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ -> –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–∞ 100 –≥
from collections import OrderedDict
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

persistent_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ"), KeyboardButton("üçé –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å")],
        [KeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")]
    ],
    resize_keyboard=True,
    is_persistent=True
)

class LimitedCache(OrderedDict):
    def __init__(self, limit=2000):
        super().__init__()
        self.limit = limit

    def __setitem__(self, key, value):
        if key in self:
            self.move_to_end(key)
        super().__setitem__(key, value)
        if len(self) > self.limit:
            self.popitem(last=False)

product_cache = LimitedCache(limit=2000)

# üìÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id -> date
last_photo_date: dict[int, date] = {}



product_logger = logging.getLogger("product_logger")
product_logger.setLevel(logging.INFO)
if not product_logger.hasHandlers():
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    product_logger.addHandler(handler)









async def calculate_summary_text(user_id: str, date_str: str) -> str:
    try:
        target_date = datetime.strptime(date_str, "%Y-%m-%d").date()

        async with async_session() as session:
            result = await session.execute(
                select(History).where(
                    History.user_id == user_id,
                    History.date == target_date
                )
            )
            entries = result.scalars().all()

        if not entries:
            return "üì≠ –í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞."

        total_kcal = total_prot = total_fat = total_carb = total_fiber = 0.0

        for entry in entries:
            match = re.search(r"(\d+(?:[.,]\d+)?) –∫–∫–∞–ª, –ë–µ–ª–∫–∏: (\d+(?:[.,]\d+)?) –≥, –ñ–∏—Ä—ã: (\d+(?:[.,]\d+)?) –≥, –£–≥–ª–µ–≤–æ–¥—ã: (\d+(?:[.,]\d+)?) –≥, –ö–ª–µ—Ç—á–∞—Ç–∫–∞: (\d+(?:[.,]\d+)?) –≥", entry.response)
            if match:
                kcal, prot, fat, carb, fiber = map(lambda x: float(x.replace(",", ".")), match.groups())
                total_kcal += kcal
                total_prot += prot
                total_fat += fat
                total_carb += carb
                total_fiber += fiber

        total_kcal = round(total_kcal)
        total_prot = round(total_prot)
        total_fat = round(total_fat)
        total_carb = round(total_carb)
        total_fiber = round(total_fiber)

        return (
            f"üìä –ò—Ç–æ–≥–æ: {total_kcal} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {total_prot} –≥\n"
            f"–ñ–∏—Ä—ã: {total_fat} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carb} –≥\n"
            f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: {total_fiber} –≥"
        )
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: {str(e)}"









def round_totals_to_int(text):
    def replacer(match):
        try:
            kcal, prot, fat, carb, fiber = [s.replace('~', '').replace('‚âà', '').strip() for s in match.groups()]
            return (
                f"üìä –ò—Ç–æ–≥–æ: {round(float(kcal))} –∫–∫–∞–ª, "
                f"–ë–µ–ª–∫–∏: {round(float(prot))} –≥, "
                f"–ñ–∏—Ä—ã: {round(float(fat))} –≥, "
                f"–£–≥–ª–µ–≤–æ–¥—ã: {round(float(carb))} –≥, "
                f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: {round(float(fiber), 1)} –≥"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –ë–ñ–£: {e}")
            return match.group(0)

    return re.sub(
        r"üìä –ò—Ç–æ–≥–æ:\s*([~‚âà]?\s*\d+\.?\d*)\s*–∫–∫–∞–ª.*?"
        r"–ë–µ–ª–∫–∏[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥.*?"
        r"–ñ–∏—Ä—ã[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥.*?"
        r"–£–≥–ª–µ–≤–æ–¥—ã[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥.*?"
        r"–ö–ª–µ—Ç—á–∞—Ç–∫–∞[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥",
        lambda m: replacer(m),
        text,
        flags=re.IGNORECASE | re.DOTALL
    )

class FixModeFilter(BoundFilter):
    key = 'fix_mode'

    def __init__(self, fix_mode):
        self.fix_mode = fix_mode

    async def check(self, message: types.Message):
        user_id = str(message.from_user.id)
        data = await get_user_data(user_id)
        return bool(data.get("fix_mode")) == self.fix_mode

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEYS = os.getenv("OPENAI_KEYS").split(",")
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

dp.filters_factory.bind(FixModeFilter)

# PostgreSQL setup
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_async_engine(DATABASE_URL, echo=False, future=True)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

class UserData(Base):
    __tablename__ = "user_data"
    user_id = Column(String, primary_key=True)
    data = Column(JSON)

class UserHistory(Base):
    __tablename__ = "user_history"
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String)
    prompt = Column(Text)
    response = Column(Text)
    timestamp = Column(DateTime)
    type = Column(String)
    data = Column(JSON)



class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    kcal = Column(Float)
    protein = Column(Float)
    fat = Column(Float)
    carb = Column(Float)
    fiber = Column(Float)

async def search_product_by_name(name: str) -> dict:
    async with async_session() as session:
        result = await session.execute(
            select(Product).where(Product.name.ilike(f"%{name}%")).limit(1)
        )
        product = result.scalar()
        if product:
            return {
                "name": product.name,
                "kcal": product.kcal,
                "protein": product.protein,
                "fat": product.fat,
                "carb": product.carb,
                "fiber": product.fiber,
            }
        return {}

function_definitions = [
    {
        "name": "search_product_by_name",
        "description": "–ù–∞—Ö–æ–¥–∏—Ç –ë–ñ–£ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
        "parameters": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥—Ä–µ—á–∫–∞ –≤–∞—Ä—ë–Ω–∞—è, –∫—É—Ä–∏—Ü–∞ –∂–∞—Ä–µ–Ω–∞—è –∏ —Ç.–ø.)"
                }
            },
            "required": ["name"]
        }
    }
]

import unicodedata

def normalize(text: str) -> str:
    text = unicodedata.normalize("NFKD", text.lower()).replace("—ë", "–µ")
    return "".join([c for c in text if not unicodedata.combining(c)]).strip()

async def get_batch_kbzu(names: list[str]) -> dict:
    results = []

    for name in names:
        product_data = await match_product_name_to_db(name)

        if product_data:
            logging.warning(f"[MATCHED ‚úÖ] '{name}' => '{product_data['matched_name']}' –∏–∑ –±–∞–∑—ã")
            results.append({
                "matched_name": product_data["matched_name"],
                "source": "db",
                "kcal": product_data["kcal"],
                "protein": product_data["protein"],
                "fat": product_data["fat"],
                "carb": product_data["carb"],
                "fiber": product_data["fiber"]
            })
        else:
            logging.warning(f"[NOT FOUND ‚ùå] '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ ‚Äî GPT –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–¥—É–º–∞—Ç—å")
            results.append({
                "matched_name": name,
                "source": "gpt",
                "kcal": None,
                "protein": None,
                "fat": None,
                "carb": None,
                "fiber": None
            })

    all_from_db = all(r["source"] == "db" for r in results)

    if all_from_db:
        text_lines = ["üçΩÔ∏è –ù–∞ —Ñ–æ—Ç–æ:"]
        total_kcal = total_prot = total_fat = total_carb = total_fiber = 0

        for r in results:
            grams = 100
            kcal = round(r["kcal"] * grams / 100)
            prot = r["protein"] * grams / 100
            fat = r["fat"] * grams / 100
            carb = r["carb"] * grams / 100
            fiber = r["fiber"] * grams / 100

            total_kcal += kcal
            total_prot += prot
            total_fat += fat
            total_carb += carb
            total_fiber += fiber

            text_lines.append(f"‚Ä¢ {r['matched_name']} ‚Äì {grams} –≥ (~{kcal} –∫–∫–∞–ª)")

        text_lines.append(
            f"üìä –ò—Ç–æ–≥–æ: {round(total_kcal)} –∫–∫–∞–ª, –ë–µ–ª–∫–∏: {round(total_prot)} –≥, –ñ–∏—Ä—ã: {round(total_fat)} –≥, "
            f"–£–≥–ª–µ–≤–æ–¥—ã: {round(total_carb)} –≥, –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {round(total_fiber, 1)} –≥"
        )

        return {
            "results": results,
            "prebuilt_text": "\n".join(text_lines)
        }

    return {
        "results": results,
        "prebuilt_text": None
    }

async def match_product_names_to_db(names: list[str]) -> list[str]:
    results = []
    for name in names:
        matched = await match_product_name_to_db(name)
        results.append(matched["matched_name"] if matched else name)
    return results


# Helper to convert datetime in user data to ISO string for JSON storage
def _convert_user_data(obj):
    if isinstance(obj, datetime):
        return obj.isoformat()
    if isinstance(obj, dict):
        return {k: _convert_user_data(v) for k, v in obj.items()}
    if isinstance(obj, list):
        return [_convert_user_data(v) for v in obj]
    return obj

async def get_user_data(user_id: str) -> dict:
    async with async_session() as session:
        result = await session.get(UserData, user_id)
        return result.data if result else {}

async def update_user_data(user_id: str, data: dict):
    # Convert datetime objects to ISO strings for JSON
    safe_data = _convert_user_data(data)
    async with async_session() as session:
        async with session.begin():
            obj = await session.get(UserData, user_id)
            if obj:
                obj.data = safe_data
            else:
                session.add(UserData(user_id=user_id, data=safe_data))

async def add_history_entry(user_id: str, entry: dict):
    async with async_session() as session:
        async with session.begin():
            session.add(UserHistory(user_id=user_id, **entry))

async def get_history(user_id: str) -> list:
    async with async_session() as session:
        result = await session.execute(select(UserHistory).where(UserHistory.user_id == user_id).order_by(UserHistory.timestamp))
        entries = result.scalars().all()
        history_list = []
        for e in entries:
            history_list.append({
                "prompt": e.prompt,
                "response": e.response,
                "timestamp": e.timestamp,
                "type": e.type
            })
        return history_list

# Custom filter for profile stage
class ProfileStageFilter(BoundFilter):
    key = 'profile_stage'
    def __init__(self, profile_stage):
        self.profile_stage = profile_stage
    async def check(self, message: types.Message):
        data = await get_user_data(str(message.from_user.id))
        return data.get("profile_stage") == self.profile_stage

dp.filters_factory.bind(ProfileStageFilter)

# In-memory storage for recent photos (for clarifications, not persisted)
recent_photos: dict = {}  # {user_id: {"image_bytes": ..., "time": datetime}}

async def send_morning_reminders():
    reminder_messages = [
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–ë–µ—Ä–µ–∂–Ω–æ –ø–∏–Ω–∞—é: –∑–∞–≤—Ç—Ä–∞–∫ –≤ –≥–æ–ª–æ–≤–µ ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è üòÑ\n–°–∫–∏–¥—ã–≤–∞–π, —è –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞—é.",
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–ó–∞–≤—Ç—Ä–∞–∫ —É–∂–µ –±—ã–ª? –ö–∏–¥–∞–π. –ß–µ–º —Ä–∞–Ω—å—à–µ –≤–Ω–µ—Å—ë—à—å ‚Äî —Ç–µ–º –º–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ —Å–æ—Ä–≤–∞—Ç—å—Å—è –Ω–∞ –æ–±–µ–¥ üòÖ",
        "–ü—Ä–∏–≤–µ—Ç, —Å —É—Ç—Ä–µ—á–∫–æ–º!\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞—é: –µ—Å–ª–∏ —É–∂–µ –ø–æ–µ–ª–∞ ‚Äî —Å–∫–∏–¥—ã–≤–∞–π, –∑–∞–ø–∏—à—É –∏ –ø–æ—Å—á–∏—Ç–∞—é)",
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ üíõ\n–Ø –∑–Ω–∞—é, —Ç—ã –∑–∞–Ω—è—Ç–∞. –ù–æ 10 —Å–µ–∫—É–Ω–¥ ‚Äî –∏ –∑–∞–≤—Ç—Ä–∞–∫ –Ω–µ –∑–∞–±—É–¥–µ—Ç—Å—è.\n–ü–∏—à–∏. –Ø –ø–æ—Å—á–∏—Ç–∞—é",
        "‚òï –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–°—á–∏—Ç–∞–π —ç—Ç–æ –Ω–µ–∂–Ω—ã–º –ø–∏–Ω–∫–æ–º: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ –∑–∞–≤—Ç—Ä–∞–∫ üòÑ",
        "üìä –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–§–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–≤—Ç—Ä–∞–∫ –∏ —Å–ø–æ–∫–æ–π–Ω–æ –∏–¥—ë–º –ø–æ–∫–æ—Ä—è—Ç—å –¥–µ–Ω—å.",
        "‚ú® –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫—Ä–∞—Å–æ—Ç–∫–∞!\n–ï—Å–ª–∏ –ø–æ–µ–ª–∞ ‚Äî –∑–∞–∫–∏–Ω—å –≤ –±–æ—Ç. –Ø –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞—é, –∫–∞–∫ –≤—Å–µ–≥–¥–∞.",
        "üåû –£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ, –∞ –∑–∞–≤—Ç—Ä–∞–∫ –≥–¥–µ?\n–ë–µ–∑ –º–µ–Ω—è –∫–∞–ª–æ—Ä–∏–∏ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è :)",
        "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!\n–ö–∞–∂–¥—ã–π –≤–Ω–µ—Å—ë–Ω–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ ‚Äî –º–∏–Ω—É—Å –æ–¥–Ω–∞ ¬´–æ–π, —è –∑–∞–±—ã–ª–∞¬ª –≤–µ—á–µ—Ä–æ–º üòâ",
        "–≠—Ç–æ –∑–Ω–∞–∫.\n–ó–Ω–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ üòå\n–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
    ]

    while True:
        now_utc = datetime.utcnow()
        async with async_session() as session:
            result = await session.execute(select(UserData))
            users = result.scalars().all()

            for user in users:
                data = user.data
                offset = data.get("utc_offset", 0)
                local_time = now_utc + timedelta(hours=offset)

                if local_time.hour == 9 and 30 <= local_time.minute < 34 and not data.get("morning_reminded", False):
                    user_id = user.user_id

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    result = await session.execute(
                        select(UserHistory).where(
                            UserHistory.user_id == user_id,
                            UserHistory.timestamp >= datetime.combine(local_time.date(), datetime.min.time())
                        )
                    )
                    entries = result.scalars().all()

                    try:
                        reminder_index = data.get("morning_index", 0)
                        message = reminder_messages[reminder_index % len(reminder_messages)]

                        if not entries:
                            await bot.send_message(user_id, message)
                            data["morning_reminded"] = True

                        data["morning_index"] = reminder_index + 1
                        user.data = data
                        await session.commit()
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

                elif local_time.hour >= 10:
                    # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                    if data.get("morning_reminded"):
                        data["morning_reminded"] = False
                        user.data = data
                        await session.commit()

        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


async def clean_old_photos():
    while True:
        await asyncio.sleep(3600)  # run every hour
        cutoff = datetime.now() - timedelta(hours=12)
        to_delete = [uid for uid, data in recent_photos.items() if data["time"] < cutoff]
        for uid in to_delete:
            del recent_photos[uid]






import json

async def get_kbzu_from_db(food_name: str):
    async with async_session() as session:
        result = await session.execute(select(Product.name))
        all_names = [row[0] for row in result.all()]

    match, score, _ = process.extractOne(food_name, all_names, scorer=fuzz.token_sort_ratio)

    if score > 90:
        async with async_session() as session:
            result = await session.execute(select(Product).where(Product.name == match))
            product = result.scalar()
            if product:
                return {
                    "matched_name": match,
                    "source": "db",
                    "kcal": product.kcal,
                    "protein": product.protein,
                    "fat": product.fat,
                    "carb": product.carb,
                    "fiber": product.fiber
                }

    # –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí –≤–µ—Ä–Ω—ë–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –∏ —Å–∫–∞–∂–µ–º GPT, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–¥—É–º–∞—Ç—å
    return {
        "matched_name": food_name,
        "source": "gpt",
        "kcal": None,
        "protein": None,
        "fat": None,
        "carb": None,
        "fiber": None
    }


from rapidfuzz import process, fuzz

COOKED_KEYWORDS = ["–æ—Ç–≤–∞—Ä", "–≤–∞—Ä–µ–Ω", "–≤–∞—Ä—ë–Ω", "–∂–∞—Ä–µ–Ω", "–∑–∞–ø–µ—á", "–≥—Ä–∏–ª—å", "—Ç—É—à–µ–Ω"]
RAW_KEYWORDS = ["—Å—ã—Ä–æ–π", "—Å—ã—Ä–æ–µ", "—Å—ã—Ä–∞—è", "—Å—ã—Ä—ã–µ", "—Å—É—Ö–æ–π", "—Å—É—Ö–∞—è", "—Å—É—Ö–∏–µ", "–Ω–µ–ø—Ä–∏–≥–æ—Ç–æ–≤"]

# –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
product_list = []
product_map = {}

async def load_products_from_db():
    global product_list, product_map
    async with async_session() as session:
        result = await session.execute(select(Product))
        products = result.scalars().all()

        product_list = []
        product_map = {}

        for p in products:
            norm_name = normalize(p.name)
            replaced_name = replace_similar_words(norm_name)

            product_list.append(replaced_name)
            product_map[replaced_name] = {
                "matched_name": p.name,
                "source": "db",
                "kcal": p.kcal,
                "protein": p.protein,
                "fat": p.fat,
                "carb": p.carb,
                "fiber": p.fiber
            }

SIMILAR_WORDS = {
    "–≤–∞—Ä–µ–Ω—ã–µ": "–æ—Ç–≤–∞—Ä–Ω—ã–µ",
    "–≤–∞—Ä—ë–Ω—ã–µ": "–æ—Ç–≤–∞—Ä–Ω—ã–µ",
    "–æ—Ç–≤–∞—Ä–Ω—ã–µ": "–æ—Ç–≤–∞—Ä–Ω—ã–µ",
    "–∂–∞—Ä–µ–Ω—ã–µ": "–∂–∞—Ä–µ–Ω–Ω—ã–µ",
    "–æ–±–∂–∞—Ä–µ–Ω–Ω—ã–π": "–∂–∞—Ä–µ–Ω—ã–π",
    "–æ–±–∂–∞—Ä–µ–Ω–Ω–∞—è": "–∂–∞—Ä–µ–Ω–∞—è",
    "—Ç—É—à—ë–Ω—ã–µ": "—Ç—É—à–µ–Ω—ã–µ",
    "—Ç—É—à–µ–Ω–Ω—ã–µ": "—Ç—É—à–µ–Ω—ã–µ",
    "–∑–∞–ø–µ—á—ë–Ω–Ω—ã–µ": "–∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ",
    "–∑–∞–ø–µ—á–µ–Ω—ã–µ": "–∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ",
    "–ø–µ—á–µ–Ω—ã–µ": "–∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ",
    "–≤–∞—Ä–µ–Ω–∞—è": "–æ—Ç–≤–∞—Ä–Ω–∞—è",
    "–≤–∞—Ä—ë–Ω–∞—è": "–æ—Ç–≤–∞—Ä–Ω–∞—è",
    "–æ—Ç–≤–∞—Ä–Ω–∞—è": "–æ—Ç–≤–∞—Ä–Ω–∞—è",
    "–∂–∞—Ä–µ–Ω–∞—è": "–∂–∞—Ä–µ–Ω–Ω–∞—è",
    "–∂–∞—Ä—ë–Ω–∞—è": "–∂–∞—Ä–µ–Ω–Ω–∞—è",
    "—Ç—É—à—ë–Ω–∞—è": "—Ç—É—à–µ–Ω–∞—è",
    "—Ç—É—à–µ–Ω–∞—è": "—Ç—É—à–µ–Ω–∞—è",
    "–∑–∞–ø–µ—á—ë–Ω–Ω–∞—è": "–∑–∞–ø–µ—á–µ–Ω–Ω–∞—è",
    "–∑–∞–ø–µ—á–µ–Ω–∞—è": "–∑–∞–ø–µ—á–µ–Ω–Ω–∞—è",
    "–ø–µ—á–µ–Ω–∞—è": "–∑–∞–ø–µ—á–µ–Ω–Ω–∞—è",
    # –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def replace_similar_words(text: str) -> str:
    words = text.split()
    replaced = [SIMILAR_WORDS.get(word.lower(), word.lower()) for word in words]
    return " ".join(replaced)



openai_index = 0  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫
def get_openai_client():
    global openai_index
    key = OPENAI_KEYS[openai_index % len(OPENAI_KEYS)]
    openai_index += 1
    return AsyncOpenAI(api_key=key)

functions = [
    {
        "name": "get_kbzu_from_db",
        "description": "–ü–æ–ª—É—á–∞–µ—Ç –ö–ë–ñ–£ –∏–∑ –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
        "parameters": {
            "type": "object",
            "properties": {
                "food_name": {
                    "type": "string",
                    "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –∂–∞—Ä–µ–Ω–∞—è')"
                }
            },
            "required": ["food_name"]
        }
    },
    {
        "name": "get_batch_kbzu",
        "description": "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
        "parameters": {
            "type": "object",
            "properties": {
                "names": {
                    "type": "array",
                    "items": {"type": "string"},
                    "description": "–°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞', '–≥—Ä–µ—á–∫–∞', '–±—Ä–æ–∫–∫–æ–ª–∏'])"
                }
            },
            "required": ["names"]
        }
    }
]





@dp.message_handler(Command("webapp"))
async def send_webapp_button(message: types.Message):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            web_app=WebAppInfo(url="https://reliable-toffee-e14334.netlify.app/")
        )
    )
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üëá", reply_markup=keyboard)



@dp.message_handler(content_types=[ContentType.VIDEO, ContentType.DOCUMENT, ContentType.STICKER])
async def handle_unsupported_content(message: types.Message):
    await message.reply(
        "‚ùóÔ∏è–Ø –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ *—Ñ–æ—Ç–æ –µ–¥—ã*.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–µ–π —Ç–∞—Ä–µ–ª–∫–∏. "
        "–ê –µ—Å–ª–∏ —É–¥–æ–±–Ω–µ–µ ‚Äî –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º üé§",
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "show_today_summary")
async def show_today_summary_callback(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    chat_id = callback_query.message.chat.id
    data = await get_user_data(user_id)
    user_offset = data.get("utc_offset", 0)
    target_date = datetime.utcnow().astimezone(timezone(timedelta(hours=user_offset))).date()
    history_list = await get_history(user_id)
    if not history_list or all(e["timestamp"].date() != target_date for e in history_list):
        # If no history at all or none for today
        if not history_list:
            await bot.send_message(chat_id, "–¢—ã –µ—â—ë –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª–∞ —Ñ–æ—Ç–æ –µ–¥—ã üçΩÔ∏è")
        else:
            await bot.send_message(chat_id, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {target_date.strftime('%Y-%m-%d')} üìÖ")
        await callback_query.answer()
        return
    entries_today = [e for e in history_list if e["timestamp"].date() == target_date]
    # Calculate totals and send each entry summary with delete button
    total_kcal = total_prot = total_fat = total_carb = total_fiber = 0
    for i, entry in enumerate(entries_today, start=1):
        kcal = prot = fat = carb = fiber = 0


        match = re.search(
            r'–ò—Ç–æ–≥–æ:\s*[~‚âà]?\s*(\d+\.?\d*)\s*–∫–∫–∞–ª.*?'
            r'–ë–µ–ª–∫–∏[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
            r'–ñ–∏—Ä—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
            r'–£–≥–ª–µ–≤–æ–¥—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
            r'–ö–ª–µ—Ç—á–∞—Ç–∫–∞[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥',
            entry['response'], flags=re.IGNORECASE | re.DOTALL
        )

        if match:
            kcal, prot, fat, carb = map(lambda x: round(float(x)), match.groups()[:4])
            fiber = round(float(match.groups()[4]), 1)
            total_fiber += fiber
        total_kcal += kcal
        total_prot += prot
        total_fat += fat
        total_carb += carb
        lines = entry['response'].splitlines()
        food_lines = [line for line in lines if line.strip().startswith(("‚Ä¢", "-"))]
        short_desc = ", ".join([re.sub(r'^[‚Ä¢\-]\s*', '', line).split("‚Äì")[0].strip() for line in food_lines]) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        text = f"{i}. {short_desc} ‚Äì {kcal} –∫–∫–∞–ª"
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", callback_data=f"del_id:{entry['timestamp'].isoformat()}")
        )
        await bot.send_message(chat_id, text, reply_markup=kb)
    # Compute remaining macros against targets
    data = await get_user_data(user_id)
    target_kcal = int(data.get("target_kcal", 0))
    target_protein = int(data.get("target_protein", 0))
    target_fat = int(data.get("target_fat", 0))
    target_carb = int(data.get("target_carb", 0))
    target_fiber = int(data.get("target_fiber", 20))
    remaining_kcal = target_kcal - total_kcal
    remaining_prot = target_protein - total_prot
    remaining_fat = target_fat - total_fat
    remaining_carb = target_carb - total_carb
    fiber_message = (
        f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: –æ—Å—Ç–∞–ª–æ—Å—å {round(target_fiber - total_fiber, 1)} –≥"
        if total_fiber < target_fiber else
        f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: –¥–æ–±—Ä–∞–Ω–∞ üëç"
    )
    warning_lines = []
    if remaining_kcal < 0:
        maintenance_kcal = int(target_kcal / 0.83) if target_kcal else 0
        if total_kcal <= maintenance_kcal and data.get("goal", 0) < data.get("weight", 0):
            warning_lines.append(
                f"‚öñÔ∏è –ü–æ –∫–∞–ª–æ—Ä–∏—è–º —É–∂–µ –ø–µ—Ä–µ–±–æ—Ä –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è, –Ω–æ —Ç—ã –≤—Å—ë –µ—â—ë –≤ —Ä–∞–º–∫–∞—Ö –Ω–æ—Ä–º—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞ ‚Äî –¥–æ –Ω–µ—ë –µ—â—ë {maintenance_kcal - total_kcal} –∫–∫–∞–ª. –í–µ—Å –Ω–µ –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π üòä"
            )
        else:
            warning_lines.append("üç© –ö–∞–ª–æ—Ä–∏–π –≤—ã—à–ª–æ —á—É—Ç—å –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –Ω–æ –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ —á—É—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ üòâ")
    if remaining_prot < 0:
        warning_lines.append("ü•© –ë–µ–ª–∫–∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å –±–æ–ª—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ.")
    if remaining_fat < 0:
        warning_lines.append("üßà –ñ–∏—Ä–æ–≤ –≤—ã—à–ª–æ –º–Ω–æ–≥–æ–≤–∞—Ç–æ ‚Äî –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, –º–æ–∂–µ—Ç –≥–¥–µ-—Ç–æ –º–∞—Å–ª–æ –ª–∏—à–Ω–µ–µ.")
    if remaining_carb < 0:
        warning_lines.append("üçû –£–≥–ª–µ–≤–æ–¥–æ–≤ –ø–µ—Ä–µ–±–æ—Ä ‚Äî –º–æ–∂–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –º–Ω–æ–≥–æ —Å–ª–∞–¥–∫–æ–≥–æ?")
    warnings_text = "\n".join(warning_lines)
    fiber_line = f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: {total_fiber:.1f} –≥"

    remaining_fiber = target_fiber - total_fiber
    remaining_fiber_line = (
        f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å {round(remaining_fiber, 1)} –≥"
        if remaining_fiber > 0 else
        "–ö–ª–µ—Ç—á–∞—Ç–∫–∞: –¥–æ–±—Ä–∞–Ω–∞ üëç"
    )

    summary_text = (
        f"üìä –°—É–º–º–∞ –∑–∞ –¥–µ–Ω—å:\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {total_kcal} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {total_prot} –≥\n"
        f"–ñ–∏—Ä—ã: {total_fat} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carb} –≥\n"
        f"{fiber_line}\n\n"
        f"üßÆ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        f"–ö–∞–ª–æ—Ä–∏–π: {remaining_kcal if remaining_kcal > 0 else 0} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–æ–≤: {remaining_prot if remaining_prot > 0 else 0} –≥\n"
        f"–ñ–∏—Ä–æ–≤: {remaining_fat if remaining_fat > 0 else 0} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥–æ–≤: {remaining_carb if remaining_carb > 0 else 0} –≥\n"
        f"{remaining_fiber_line}\n\n"
        f"{warnings_text}"
    )
    sent_msg = await bot.send_message(chat_id, summary_text)
    # Store summary message ID for updates on deletion
    data["summary_message_id"] = sent_msg.message_id
    await update_user_data(user_id, data)
    await callback_query.answer()

@dp.message_handler(lambda message: message.text == "üçé –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å")
async def summary_button_handler(message: types.Message):
    # –§–µ–π–∫–æ–≤—ã–π callback_query –¥–ª—è –≤—ã–∑–æ–≤–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    class FakeCallbackQuery:
        def __init__(self, message):
            self.from_user = message.from_user
            self.message = message
        async def answer(self):
            pass

    fake_cb = FakeCallbackQuery(message)
    await show_today_summary_callback(fake_cb)

@dp.callback_query_handler(lambda c: c.data.startswith("del_id:"))
async def delete_entry(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    entry_id = callback_query.data.split(":", 1)[1]
    history_list = await get_history(user_id)
    if not history_list or len(history_list) == 0:
        await callback_query.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    entry_to_remove = None
    for entry in history_list:
        if entry["timestamp"].isoformat() == entry_id:
            entry_to_remove = entry
            break
    if entry_to_remove:
        # Remove from database
        try:
            dt = entry_to_remove["timestamp"]
            async with async_session() as session:
                async with session.begin():
                    await session.execute(delete(UserHistory).where(UserHistory.user_id == user_id, UserHistory.timestamp == dt))
        except Exception as e:
            logging.error(f"Failed to delete entry: {e}")
        # Edit the message with the removed entry
        await callback_query.message.edit_text("‚ùå –ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ.")
        # Update summary message if exists
        data = await get_user_data(user_id)
        summary_message_id = data.get("summary_message_id")
        if summary_message_id:
            user_offset = data.get("utc_offset", 0)
            today = datetime.utcnow().astimezone(timezone(timedelta(hours=user_offset))).date()
            # Recompute toda–∞y's totals without the removed entry
            entries_today = [e for e in history_list if e["timestamp"].date() == today and e["timestamp"] != entry_to_remove["timestamp"]]
            total_kcal = total_prot = total_fat = total_carb = total_fiber = 0
            for e in entries_today:
                kcal = prot = fat = carb = fiber = 0

                match = re.search(
                    r'–ò—Ç–æ–≥–æ:\s*[~‚âà]?\s*(\d+\.?\d*)\s*–∫–∫–∞–ª.*?'
                    r'–ë–µ–ª–∫–∏[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                    r'–ñ–∏—Ä—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                    r'–£–≥–ª–µ–≤–æ–¥—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                    r'–ö–ª–µ—Ç—á–∞—Ç–∫–∞[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥',
                    entry['response'], flags=re.IGNORECASE | re.DOTALL
                )

                if match:
                    kcal, prot, fat, carb = map(lambda x: round(float(x)), match.groups()[:4])
                    fiber = round(float(match.groups()[4]), 1)
                    total_fiber += fiber
                total_kcal += kcal
                total_prot += prot
                total_fat += fat
                total_carb += carb
            target_kcal = int(data.get("target_kcal", 0))
            target_protein = int(data.get("target_protein", 0))
            target_fat = int(data.get("target_fat", 0))
            target_carb = int(data.get("target_carb", 0))
            target_fiber = int(data.get("target_fiber", 20))
            remaining_kcal = target_kcal - total_kcal
            remaining_prot = target_protein - total_prot
            remaining_fat = target_fat - total_fat
            remaining_carb = target_carb - total_carb
            warnings = []
            if remaining_kcal < 0:
                maintenance_kcal = int(target_kcal / 0.83) if target_kcal else 0
                if total_kcal <= maintenance_kcal:
                    warnings.append(f"‚öñÔ∏è –ï—â—ë –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è ‚Äî –¥–æ –Ω–µ—ë {maintenance_kcal - total_kcal} –∫–∫–∞–ª.")
                else:
                    warnings.append("üç© –ö–∞–ª–æ—Ä–∏–π –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã ‚Äî –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ —á—É—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ.")
            if remaining_prot < 0:
                warnings.append("ü•© –ë–µ–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã ‚Äî —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ.")
            if remaining_fat < 0:
                warnings.append("üßà –ñ–∏—Ä–æ–≤ –º–Ω–æ–≥–æ–≤–∞—Ç–æ ‚Äî –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ.")
            if remaining_carb < 0:
                warnings.append("üçû –£–≥–ª–µ–≤–æ–¥–æ–≤ –ø–µ—Ä–µ–±–æ—Ä ‚Äî –º–æ–∂–µ—Ç, –±—ã–ª–æ –º–Ω–æ–≥–æ —Å–ª–∞–¥–∫–æ–≥–æ?")
            warnings_text = "\n".join(warnings)
            try:
                fiber_line = (
                    f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: {total_fiber:.1f} –≥"
                    if total_fiber < target_fiber else
                    f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: {total_fiber:.1f} –≥ (–¥–æ–±—Ä–∞–Ω–∞ üëç)"
                )

                remaining_fiber = target_fiber - total_fiber
                remaining_fiber_line = (
                    f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å {round(remaining_fiber, 1)} –≥"
                    if remaining_fiber > 0 else
                    "–ö–ª–µ—Ç—á–∞—Ç–∫–∞: –¥–æ–±—Ä–∞–Ω–∞ üëç"
                )

                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=summary_message_id,
                    text=(
                        f"üìä –°—É–º–º–∞ –∑–∞ –¥–µ–Ω—å:\n"
                        f"–ö–∞–ª–æ—Ä–∏–∏: {total_kcal} –∫–∫–∞–ª\n"
                        f"–ë–µ–ª–∫–∏: {total_prot} –≥\n"
                        f"–ñ–∏—Ä—ã: {total_fat} –≥\n"
                        f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carb} –≥\n"
                        f"{fiber_line}\n\n"
                        f"üßÆ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                        f"–ö–∞–ª–æ—Ä–∏–π: {remaining_kcal if remaining_kcal > 0 else 0} –∫–∫–∞–ª\n"
                        f"–ë–µ–ª–∫–æ–≤: {remaining_prot if remaining_prot > 0 else 0} –≥\n"
                        f"–ñ–∏—Ä–æ–≤: {remaining_fat if remaining_fat > 0 else 0} –≥\n"
                        f"–£–≥–ª–µ–≤–æ–¥–æ–≤: {remaining_carb if remaining_carb > 0 else 0} –≥\n"
                        f"{remaining_fiber_line}\n\n"
                        f"{warnings_text}"
                    )
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏: {e}")
        return
    await callback_query.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(commands=['–∏—Å—Ç–æ—Ä–∏—è', 'history'])
async def show_history(message: types.Message):
    user_id = str(message.from_user.id)
    history_list = await get_history(user_id)
    if not history_list or len(history_list) == 0:
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–¥—ã üçΩÔ∏è")
        return
    text = "üóÇ *–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n"
    for i, entry in enumerate(history_list[-10:], start=1):
        prompt_preview = entry['prompt'][:60].strip()
        text += f"{i}. _{prompt_preview}_\n"
        text += f"{entry['response'][:500].strip()}\n\n"
    await message.reply(text, parse_mode="Markdown")

@dp.message_handler(commands=['start'])
async def start_profile(message: types.Message):
    user_id = str(message.from_user.id)
    data = await get_user_data(user_id)
    data["profile_stage"] = "gender"
    
    await update_user_data(user_id, data)
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–ú—É–∂", callback_data="gender:–º—É–∂"),
        InlineKeyboardButton("–ñ–µ–Ω", callback_data="gender:–∂–µ–Ω")
    )
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç—É –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–º—É üçΩ\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Ç–≤–æ—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data.startswith("gender:"))
async def handle_gender(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    gender = callback_query.data.split(":")[1]
    data = await get_user_data(user_id)
    data["gender"] = gender
    data["profile_stage"] = "age"
    await update_user_data(user_id, data)
    # Remove the gender keyboard
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–∞: {e}")
    await bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏.")
    await callback_query.answer()

@dp.message_handler(profile_stage="age")
async def set_age(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text.strip()
    try:
        age = int(text)
        if age < 10 or age > 100:
            raise ValueError
    except:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 10 –¥–æ 100.")
        return
    data = await get_user_data(user_id)
    data["age"] = int(text)
    data["profile_stage"] = "height"
    await update_user_data(user_id, data)
    await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–º?")

@dp.message_handler(profile_stage="height")
async def set_height(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text.strip()
    try:
        height = int(text)
        if height < 120 or height > 250:
            raise ValueError
    except:
        await message.reply("–ù–∞–ø–∏—à–∏ —Ä–æ—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 165).")
        return
    data = await get_user_data(user_id)
    data["height"] = int(text)
    data["profile_stage"] = "weight"
    await update_user_data(user_id, data)
    await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–≥?")

@dp.message_handler(profile_stage="edit_weight")
async def handle_edit_weight(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text.strip().replace(',', '.')
    try:
        weight = float(text)
        if weight < 30 or weight > 250:
            raise ValueError
    except:
        await message.reply("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –≤–µ—Å —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 67.5")
        return

    data = await get_user_data(user_id)
    data["weight"] = weight
    data["profile_stage"] = None

    # –ü–µ—Ä–µ—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∞–∂–∞
    gender = data.get("gender")
    age = data.get("age")
    height = data.get("height")
    goal = data.get("goal")
    activity = data.get("activity")
    pregnant = data.get("pregnant", False)

    if gender == "–º—É–∂":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    multipliers = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.3, "–≤—ã—Å–æ–∫–∏–π": 1.4}
    maintenance = bmr * multipliers.get(activity, 1.2)
    if pregnant:
        if goal == weight:
            target_calories = maintenance * 1.17
        elif goal < weight:
            target_calories = maintenance
        else:
            target_calories = maintenance * 1.34
    else:
        if goal == weight:
            target_calories = maintenance
        elif goal < weight:
            target_calories = maintenance * 0.83
        else:
            target_calories = maintenance * 1.17
    target_calories = max(1200, target_calories)
    protein_grams = int((target_calories * 0.3) / 4)
    fat_grams = int((target_calories * 0.3) / 9)
    carbs_grams = int((target_calories * 0.4) / 4)
    fiber_grams = max(20, round(target_calories * 0.014))

    data["target_kcal"] = int(target_calories)
    data["target_protein"] = protein_grams
    data["target_fat"] = fat_grams
    data["target_carb"] = carbs_grams
    data["target_fiber"] = fiber_grams

    await update_user_data(user_id, data)

    await message.reply(
        f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω: *{weight} –∫–≥*.\n"
        f"üìä –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: *{int(target_calories)} –∫–∫–∞–ª*.",
        parse_mode="Markdown"
    )


@dp.message_handler(profile_stage="weight")
async def set_weight(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text.strip().replace(',', '.')
    try:
        weight = float(text)
        if weight < 30 or weight > 250:
            raise ValueError
    except:
        await message.reply("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –≤–µ—Å —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 67.5")
        return

    data = await get_user_data(user_id)
    data["weight"] = weight
    data["profile_stage"] = "goal"
    await update_user_data(user_id, data)
    await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–≥?")


@dp.message_handler(profile_stage="goal")
async def set_goal_weight(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text.strip().replace(',', '.')
    try:
        goal = float(text)
        if goal < 30 or goal > 250:
            raise ValueError
    except:
        await message.reply("–ù–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 60 –∏–ª–∏ 72.5.")
        return
    data = await get_user_data(user_id)
    data["goal"] = float(text)
    data["profile_stage"] = "activity"
    await update_user_data(user_id, data)
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="activity:–Ω–∏–∑–∫–∏–π"),
        InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="activity:—Å—Ä–µ–¥–Ω–∏–π"),
        InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data="activity:–≤—ã—Å–æ–∫–∏–π")
    )
    await message.reply(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
        "1Ô∏è‚É£ *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è* ‚Äî —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞, –ø–æ—á—Ç–∏ –Ω–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è, –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
        "2Ô∏è‚É£ *–°—Ä–µ–¥–Ω—è—è* ‚Äî –Ω–µ–º–Ω–æ–≥–æ –¥–≤–∏–≥–∞–µ—à—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è (–≥—É–ª—è–µ—à—å, –¥–µ–ª–∞–µ—à—å –¥–µ–ª–∞ –ø–æ –¥–æ–º—É), –±—ã–≤–∞—é—Ç –ª—ë–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1‚Äì2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.\n"
        "3Ô∏è‚É£ *–í—ã—Å–æ–∫–∞—è* ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3‚Äì5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.",
        reply_markup=kb, parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("activity:"))
async def handle_activity(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    activity_level = callback_query.data.split(":")[1]
    data = await get_user_data(user_id)
    data["activity"] = activity_level
    # If female, ask pregnancy status; if male, calculate immediately
    if data.get("gender") == "–∂–µ–Ω":
        data["profile_stage"] = "pregnant"
        await update_user_data(user_id, data)
        kb = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–î–∞", callback_data="pregnancy:yes"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="pregnancy:no")
        )
        # Remove activity buttons
        try:
            await callback_query.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        await bot.send_message(
            user_id,
            "–ë–µ—Ä–µ–º–µ–Ω–Ω—ã –∏–ª–∏ –∫–æ—Ä–º–∏—Ç–µ –≥—Ä—É–¥—å—é?\n\n"
            "üí° –í –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (—Å–æ 2 —Ç—Ä–∏–º–µ—Å—Ç—Ä–∞) –∏ –ø—Ä–∏ –≥—Ä—É–¥–Ω–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω—É–∂–Ω–æ –ø–æ–≤—ã—à–∞—Ç—å.",
            reply_markup=kb
        )
        await callback_query.answer()
    else:
        # Male or not female: proceed to calculate targets
        data["profile_stage"] = "timezone"  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        await update_user_data(user_id, data)
        await bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏? –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å, –±–µ–∑ –º–∏–Ω—É—Ç (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23)")
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("pregnancy:"))
async def handle_pregnancy(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    answer = callback_query.data.split(":")[1]
    data = await get_user_data(user_id)
    data["pregnant"] = (answer == "yes")
    data["profile_stage"] = "timezone"  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    await update_user_data(user_id, data)
    await bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏? –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å, –±–µ–∑ –º–∏–Ω—É—Ç (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23)")
    # Remove pregnancy buttons
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    await callback_query.answer()

@dp.message_handler(profile_stage="timezone")
async def set_timezone(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text.strip()

    match = re.match(r"^\d{1,2}$", text)
    if not match:
        await message.reply("–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏? –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å, –±–µ–∑ –º–∏–Ω—É—Ç (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23)")
        return

    hour = int(text)
    if hour < 0 or hour > 23:
        await message.reply("–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 23. –ù–∞–ø—Ä–∏–º–µ—Ä: 9 –∏–ª–∏ 20.")
        return

    now_utc = datetime.utcnow()
    user_offset = hour - now_utc.hour
    if user_offset > 12:
        user_offset -= 24
    elif user_offset < -12:
        user_offset += 24

    data = await get_user_data(user_id)
    data["utc_offset"] = user_offset
    data["profile_stage"] = None
    await update_user_data(user_id, data)

    await calculate_and_send_targets(message.chat.id, user_id)

async def calculate_and_send_targets(chat_id, user_id: str):
    data = await get_user_data(user_id)
    gender = data.get("gender")
    age = data.get("age")
    height = data.get("height")
    weight = data.get("weight")
    goal = data.get("goal")
    activity = data.get("activity")
    pregnant = data.get("pregnant", False)
    # Calculate BMR (Mifflin-St Jeor)
    if gender == "–º—É–∂":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    multipliers = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.3, "–≤—ã—Å–æ–∫–∏–π": 1.4}
    maintenance = bmr * multipliers.get(activity, 1.2)
    if pregnant:
        if goal == weight:
            target_calories = maintenance * 1.17
        elif goal < weight:
            target_calories = maintenance
        else:
            target_calories = maintenance * 1.34
    else:
        if goal == weight:
            target_calories = maintenance
        elif goal < weight:
            target_calories = maintenance * 0.83
        else:
            target_calories = maintenance * 1.17
    target_calories = max(1200, target_calories)
    protein_grams = int((target_calories * 0.3) / 4)
    fat_grams = int((target_calories * 0.3) / 9)
    carbs_grams = int((target_calories * 0.4) / 4)
    fiber_grams = max(20, round(target_calories * 0.014))
    # Update user data with target values
    data["target_kcal"] = int(target_calories)
    data["target_protein"] = protein_grams
    data["target_fat"] = fat_grams
    data["target_carb"] = carbs_grams
    data["target_fiber"] = fiber_grams
    data["profile_stage"] = None
    await update_user_data(user_id, data)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–∏–∑—É
    persistent_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ"), KeyboardButton("üçé –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å")],
            [KeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—á—ë—Ç –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(
        chat_id,
        (
            f"üìä –¢–≤–æ—è —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:\n"
            f"‚Äî –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–≤–æ–µ–π —Ü–µ–ª–∏ –ø–æ –≤–µ—Å—É: {int(target_calories)} –∫–∫–∞–ª\n"
            f"‚Äî –ë–µ–ª–∫–∏: {protein_grams} –≥\n"
            f"‚Äî –ñ–∏—Ä—ã: {fat_grams} –≥\n"
            f"‚Äî –£–≥–ª–µ–≤–æ–¥—ã: {carbs_grams} –≥\n"
            f"‚Äî –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {fiber_grams} –≥\n"
            f"‚Äî –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞: {int(maintenance)} –∫–∫–∞–ª\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã ‚Äî —è –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞—é üçΩ\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –∫ —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ:\n"
            f"‚Ä¢ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ —Ç–∞—Ä–µ–ª–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∏—Å, —Å–∞–ª–∞—Ç —Å–æ —Å—Ç.–ª. –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞)\n"
            f"‚Ä¢ –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ (–≤–∞—Ä—ë–Ω–æ–µ, –∂–∞—Ä–µ–Ω–æ–µ, –∑–∞–ø–µ—á–µ–Ω–æ–µ)\n"
            f"‚Ä¢ —Ä–∞–∑–º–µ—Ä—ã (—Ç–∞—Ä–µ–ª–∫–∞ 25 —Å–º, –∫—Ä—É–∂–∫–∞ 300 –º–ª, –∫—É—Å–æ–∫ —Å –ª–∞–¥–æ–Ω—å –∏ —Ç.–ø.)\n\n"
            f"–ü—Ä–∏–º–µ—Ä:\n"
            f"¬´–ö—É—Ä–∏—Ü–∞ –∑–∞–ø–µ—á—ë–Ω–Ω–∞—è, –∫–∞—Ä—Ç–æ—à–∫–∞ –≤–∞—Ä—ë–Ω–∞—è, —Ç–∞—Ä–µ–ª–∫–∞ 26 —Å–º¬ª\n\n"
            f"üì© –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ –ø—Ä—è–º–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ —è —Å—Ä–∞–∑—É –≤—Å—ë —Ä–∞—Å—Å—á–∏—Ç–∞—é!"
        ),
        reply_markup=persistent_keyboard
    )




@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = str(message.from_user.id)
    now = datetime.now()
    data = await get_user_data(user_id)
    usage_count = data.get("usage_count", 0)
    show_hint = usage_count < 2
    data["usage_count"] = usage_count + 1
    await update_user_data(user_id, data)

    last_time = data.get("last_photo_time")
    if last_time:
        if isinstance(last_time, str):
            try:
                last_time_dt = datetime.fromisoformat(last_time)
            except Exception:
                last_time_dt = None
        else:
            last_time_dt = last_time
        if last_time_dt and (now - last_time_dt).total_seconds() < 15:
            await message.reply("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–æ—Ç–æ üôè –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ –æ–¥–Ω–æ–π –∑–∞ —Ä–∞–∑.")
            return

    history_list = await get_history(user_id)
    user_offset = data.get("utc_offset", 0)
    today = datetime.utcnow().astimezone(timezone(timedelta(hours=user_offset))).date()
    photo_entries_today = [e for e in history_list if e.get("type") == "photo" and e["timestamp"].date() == today]
    if len(photo_entries_today) >= 10:
        data["last_photo_time"] = now
        await update_user_data(user_id, data)
        await message.reply("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ 10 —Ñ–æ—Ç–æ. –ù–æ–≤—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞.")
        return

    data["last_photo_time"] = now
    await update_user_data(user_id, data)
    await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...", reply_markup=persistent_keyboard)

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_bytes = await bot.download_file(file.file_path)
    image_bytes = file_bytes.getvalue()
    base64_image = base64.b64encode(image_bytes).decode("utf-8")

    user_caption = message.caption.strip() if message.caption else None
    caption_block = (
        {"type": "text", "text": f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_caption}. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥—É –∏–ª–∏ –≤–µ—Å –µ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ."}
        if user_caption else None
    )

    recent_photos[user_id] = {"image_bytes": image_bytes, "time": datetime.now()}
    data["last_prompt"] = user_caption or ""
    data["prompts"] = []
    await update_user_data(user_id, data)

    try:
        client = get_openai_client()
        messages = [
            {"role": "system", "content": (
                "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –µ–¥—ã.\n\n"
                "–û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ, –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ (–≤ –≥—Ä–∞–º–º–∞—Ö), –∏ –≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "[{\"name\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\", \"grams\": —á–∏—Å–ª–æ}]\n\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û:\n"
                "–ï—Å–ª–∏ –±–ª—é–¥–æ —Å–ª–æ–∂–Ω–æ–µ ‚Äî —Ä–∞—Å–ø–∏—à–∏ –µ–≥–æ –ø–æ —Å–æ—Å—Ç–∞–≤—É. –î–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –≤—Å—ë —Ä–∞–≤–Ω–æ —É–∫–∞–∂–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å.\n"
                "- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≥—Ä–µ—á–∫–∞ –≤–∞—Ä—ë–Ω–∞—è¬ª, ¬´–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –∂–∞—Ä–µ–Ω–∞—è¬ª, ¬´–±–∞–Ω–∞–Ω¬ª.\n"
                "- –û—Ü–µ–Ω–∏–≤–∞–π –≤–µ—Å –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏ —Ç–∏–ø–∏—á–Ω—ã–º –ø–æ—Ä—Ü–∏—è–º, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫—É—Ö–Ω–∏, –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤ –†–æ—Å—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç—ã.\n"
                "- –ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–¥–µ–π, —Ä—É–∫–∏, —Ñ–æ–Ω, –ø–æ—Å—É–¥—É –∏ –≤—Å—ë, —á—Ç–æ –Ω–µ –µ–¥–∞.\n"
                "- –ï—Å–ª–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ —á—ë—Ç–∫–æ –≤–∏–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ô–æ–≥—É—Ä—Ç Epica –º–∞–Ω–≥–æ¬ª, ¬´Almette —Å—ã—Ä –ª—ë–≥–∫–∏–π¬ª) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ \"branded\": true\n"
                "- –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ \"branded\": false\n"
                "- –ù–µ –æ—Ü–µ–Ω–∏–≤–∞–π –ö–ë–ñ–£ —Å–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–µ—Å –∏ branded\n"
                "- –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–æ–¥–∞."
            )},
            {"role": "user", "content": [
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}},
                *([caption_block] if caption_block else [])
            ]}
        ]
        try:
            response = await client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                max_tokens=700,
                temperature=0,
                functions=functions,
                function_call="auto"
            )
        except Exception as e:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            logging.error(f"[OpenAI ERROR in handle_photo]: {e}")
            return

        content = response.choices[0].message.content.strip()
        if content.startswith("```"):
            content = content.replace("```json", "").replace("```", "").strip()

        logging.warning(f"[GPT raw JSON] {content}")
        try:
            food_items = json.loads(content)
        except json.JSONDecodeError:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∫—ç—à –∏ –ë–î
        results = []
        not_found = []
        for item in food_items:
            name = item["name"]
            grams = item["grams"]
            is_branded = item.get("branded", False)  # üü° –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ branded
            cached = product_cache.get(name.lower())
            if cached:
                nutr = cached
                matched_name = name
            else:
                if is_branded:
                    matched = await match_product_name_to_brand_table(name)  # üü° –∏—â–µ–º –≤ –±—Ä–µ–Ω–¥–∞—Ö
                else:
                    matched = await match_product_name_to_ready_table(name)  # üü° –∏—â–µ–º –≤ –≥–æ—Ç–æ–≤—ã—Ö

                if matched:
                    nutr = {
                        "kcal": matched["kcal"],
                        "protein": matched["protein"],
                        "fat": matched["fat"],
                        "carb": matched["carb"],
                        "fiber": matched["fiber"]
                    }
                    product_cache[name.lower()] = nutr
                    matched_name = matched["matched_name"]
                else:
                    nutr = None
                    matched_name = name

            if nutr:
                logging.info(f"[‚úÖ –ò–∑ –ë–î] {matched_name} ‚Äî {grams} –≥")
                results.append({
                    "name": matched_name,
                    "grams": grams,
                    "kcal": round(nutr["kcal"] * grams / 100),
                    "protein": round(nutr["protein"] * grams / 100, 1),
                    "fat": round(nutr["fat"] * grams / 100, 1),
                    "carb": round(nutr["carb"] * grams / 100, 1),
                    "fiber": round(nutr["fiber"] * grams / 100, 1)
                })
            else:
                logging.warning(f"[‚ùå GPT —Å–∞–º —Å—á–∏—Ç–∞–µ—Ç] {name} ‚Äî {grams} –≥")
                not_found.append({"name": name, "grams": grams, "branded": is_branded})

        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –≤ GPT
        if not_found:
            desc = "\n".join([f"{item['name']} ‚Äì {item['grams']} –≥" for item in not_found])
            second_prompt = [
                {"role": "system", "content": (
                    "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –†–∞—Å—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –≤–µ—Å–æ–º.\n\n"
                    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
                    "[{\"name\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\", \"grams\": ..., \"kcal\": ..., \"protein\": ..., \"fat\": ..., \"carb\": ..., \"fiber\": ...}]\n\n"
                    "‚ö†Ô∏è –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
                    "‚ö†Ô∏è –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."
                )},
                {"role": "user", "content": desc}
            ]

            try:
                second_response = await client.chat.completions.create(
                    model="gpt-4o",
                    messages=second_prompt,
                    temperature=0,
                    max_tokens=700
                )
            except Exception as e:
                await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ö–ë–ñ–£ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                logging.error(f"[OpenAI ERROR in handle_photo second call]: {e}")
                return

            second_content = second_response.choices[0].message.content.strip()
            if second_content.startswith("```"):
                second_content = second_content.replace("```json", "").replace("```", "").strip()
            gpt_items = json.loads(second_content)
            for item in gpt_items:
                logging.warning(f"[üß† –ü—Ä–∏–¥—É–º–∞–Ω–æ GPT] {item['name']} ‚Äî {item['grams']} –≥")
                results.append({
                    "name": item["name"],
                    "grams": item["grams"],
                    "kcal": round(item["kcal"]),
                    "protein": round(item["protein"], 1),
                    "fat": round(item["fat"], 1),
                    "carb": round(item["carb"], 1),
                    "fiber": round(item["fiber"], 1)
                })

        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_kcal = total_prot = total_fat = total_carb = total_fiber = 0
        text_lines = ["üçΩÔ∏è –ù–∞ —Ñ–æ—Ç–æ:"]
        not_found_names = {item["name"] for item in not_found if item.get("branded")}
        for r in results:
            total_kcal += r["kcal"]
            total_prot += r["protein"]
            total_fat += r["fat"]
            total_carb += r["carb"]
            total_fiber += r["fiber"]
            mark = " *" if r["name"] in not_found_names else ""
            text_lines.append(f"‚Ä¢ {r['name']}{mark} ‚Äì {r['grams']} –≥ (~{r['kcal']} –∫–∫–∞–ª)")
        text_lines.append(
            f"üìä –ò—Ç–æ–≥–æ: {total_kcal} –∫–∫–∞–ª, –ë–µ–ª–∫–∏: {total_prot} –≥, –ñ–∏—Ä—ã: {total_fat} –≥, "
            f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carb} –≥, –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {round(total_fiber, 1)} –≥"
        )
        if not_found_names:
            text_lines.append("üî∏ * ‚Äî —Ç–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å")

        int_user_id = int(user_id)
        if (int_user_id not in last_photo_date or last_photo_date[int_user_id] < today) and show_hint:
            text_lines.append("\nüí° –ß—Ç–æ-—Ç–æ –Ω–µ —É—á—ë–ª? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ò—Å–ø—Ä–∞–≤–∏—Ç—å¬ª –∏ –Ω–∞–ø–∏—à–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–º ‚Äî —è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é.\n")
            text_lines.append("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å, –Ω–∞–∂–º–∏ ¬´üçé –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å¬ª –≤–Ω–∏–∑—É. –ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Ç–∫—Ä—ã—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ (–ø–æ—Ö–æ–∂–∞ –Ω–∞ üéõ), –∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏.")
            last_photo_date[int_user_id] = today

        answer = "\n".join(text_lines)
        parsed_ingredients = results

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        return

    answer = round_totals_to_int(answer)

    entry = {
        "prompt": user_caption or "",
        "response": answer,
        "timestamp": now,
        "type": "photo",
        "data": parsed_ingredients
    }
    await add_history_entry(user_id, entry)

    buttons = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí¨ –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"start_fix:{entry['timestamp'].isoformat()}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_id:{entry['timestamp'].isoformat()}")
    )
    await message.reply(answer, reply_markup=buttons)




@dp.callback_query_handler(lambda c: c.data.startswith("cancel_fix:"))
async def cancel_fix_callback(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    data = await get_user_data(user_id)

    data["fix_mode"] = None
    await update_user_data(user_id, data)

    timestamp = callback_query.data.split("cancel_fix:")[1]
    original_text = callback_query.message.text or ""

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É ¬´‚úèÔ∏è –í —Ä–µ–∂–∏–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è¬ª –∏–∑ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
    new_text = original_text.replace("\n\n‚úèÔ∏è –í–Ω–µ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, —è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é", "").strip()

    new_buttons = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí¨ –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"start_fix:{timestamp}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_id:{timestamp}")
    )

    await callback_query.message.edit_text(new_text, reply_markup=new_buttons)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("start_fix:"))
async def start_fixing(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    timestamp_str = callback_query.data.split(":", 1)[1]

    data = await get_user_data(user_id)
    data["fix_mode"] = timestamp_str
    data["prompts"] = []
    await update_user_data(user_id, data)

    await callback_query.message.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–º ‚Äî —è –≤—Å—ë —É—á—Ç—É.")
    await callback_query.answer()

@dp.message_handler(lambda message: message.text == "üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
async def handle_add_food_reply_button(message: types.Message):
    await message.reply(
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî —è —Å–∞–º —Ä–∞—Å–ø–æ–∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —Ç–∞—Ä–µ–ª–∫–µ, –∏ –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏.\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ ‚Äî –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–º üé§\n\n"
        "üí° –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –æ–±—ä—ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´3 –ø–µ—á–µ–Ω—å—è —Ç–∏–ø–∞ ‚Äú–ú–∞—Ä–∏—è‚Äù –∏ —á–∞—à–∫–∞ —á–∞—è –±–µ–∑ —Å–∞—Ö–∞—Ä–∞¬ª). –¢–æ–≥–¥–∞ —Ä–∞—Å—á—ë—Ç –±—É–¥–µ—Ç —Ç–æ—á–Ω–µ–µ.\n\n"
        "üì∑ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –≤–Ω–∏–∑—É.\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º–æ–∂–Ω–æ –Ω–µ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –∞ –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–∑—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å üòâ"
    )



from io import BytesIO


@dp.message_handler(content_types=[ContentType.VOICE, ContentType.AUDIO], fix_mode=False)
async def handle_voice_audio(message: types.Message):
    user_id = str(message.from_user.id)
    now = datetime.now()
    data = await get_user_data(user_id)
    usage_count = data.get("usage_count", 0)
    show_hint = usage_count < 2
    data["usage_count"] = usage_count + 1
    await update_user_data(user_id, data)

    history_list = await get_history(user_id)
    user_offset = data.get("utc_offset", 0)
    today = datetime.utcnow().astimezone(timezone(timedelta(hours=user_offset))).date()
    text_entries_today = [e for e in history_list if e.get("type") == "text" and e["timestamp"].date() == today]
    if len(text_entries_today) >= 60:
        await message.reply("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ 10 –æ–ø–∏—Å–∞–Ω–∏–π –µ–¥—ã. –ù–æ–≤—ã–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞.")
        return

    await message.reply("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ...")

    file_id = message.voice.file_id if message.voice else message.audio.file_id
    file = await bot.get_file(file_id)
    file_bytes = await bot.download_file(file.file_path)
    audio_file = BytesIO(file_bytes.getvalue())
    audio_file.name = "audio.ogg"

    try:
        client = get_openai_client()
        transcript_response = await client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file,
            response_format="text",
            language="ru",
            prompt="–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å—ä–µ–ª–∞ ‚Äî –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£"
        )
        user_text = transcript_response.strip()
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å —á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è")
        return


    if len(user_text) < 5:
        await message.reply("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≥–æ–≤–æ—Ä–∏ –µ–¥—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ü—Ä–∏–º–µ—Ä: ¬´–ë—É–ª–æ—á–∫–∞ —Å –∫–æ—Ä–∏—Ü–µ–π —Ä–∞–∑–º–µ—Ä–æ–º —Å –ª–∞–¥–æ–Ω—å –∏ –∫–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º 250 –º–ª¬ª")
        return

    await message.reply("–°—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏...", reply_markup=persistent_keyboard)

    try:
        client = get_openai_client()
        messages = [
            {"role": "system", "content": (
                "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª –≥–æ–ª–æ—Å–æ–º, —á—Ç–æ –æ–Ω –µ–ª.\n\n"
                "–û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–Ω —É–ø–æ–º—è–Ω—É–ª –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ (–≤ –≥—Ä–∞–º–º–∞—Ö).\n\n"
                "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
                "[{\"name\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\", \"grams\": —á–∏—Å–ª–æ}]\n\n"
                "‚ö†Ô∏è –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ô–æ–≥—É—Ä—Ç Epica –º–∞–Ω–≥–æ¬ª), –ø–æ–º–µ—Ç—å –µ–≥–æ –∫–∞–∫ branded: true\n"
                "‚ö†Ô∏è –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî branded: false\n"
                "‚ö†Ô∏è –ù–µ –æ—Ü–µ–Ω–∏–≤–∞–π –ö–ë–ñ–£\n"
                "‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–æ–¥–∞."
            )},
            {"role": "user", "content": user_text}
        ]


        try:
            response = await client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                max_tokens=700,
                temperature=0,
            )
        except Exception as e:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            logging.error(f"[OpenAI ERROR in handle_voice_audio]: {e}")
            return


        content = response.choices[0].message.content.strip()
        if content.startswith("```"):
            content = content.replace("```json", "").replace("```", "").strip()

        food_items = json.loads(content)
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return

    results = []
    not_found = []

    for item in food_items:
        name = item["name"]
        grams = item["grams"]
        is_branded = item.get("branded", False)

        cached = product_cache.get(name.lower())
        if cached:
            nutr = cached
            matched_name = name
        else:
            matched = await match_product_name_to_brand_table(name) if is_branded else await match_product_name_to_ready_table(name)
            if matched:
                nutr = {
                    "kcal": matched["kcal"],
                    "protein": matched["protein"],
                    "fat": matched["fat"],
                    "carb": matched["carb"],
                    "fiber": matched["fiber"]
                }
                matched_name = matched["matched_name"]
                product_cache[name.lower()] = nutr
            else:
                nutr = None
                matched_name = name

        if nutr:
            results.append({
                "name": matched_name,
                "grams": grams,
                "kcal": round(nutr["kcal"] * grams / 100),
                "protein": round(nutr["protein"] * grams / 100, 1),
                "fat": round(nutr["fat"] * grams / 100, 1),
                "carb": round(nutr["carb"] * grams / 100, 1),
                "fiber": round(nutr["fiber"] * grams / 100, 1)
            })
        else:
            not_found.append({"name": name, "grams": grams, "branded": is_branded})


    if not_found:
        desc = "\n".join([f"{item['name']} ‚Äì {item['grams']} –≥" for item in not_found])
        second_prompt = [
            {"role": "system", "content": (
                "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –†–∞—Å—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –≤–µ—Å–æ–º.\n\n"
                "–§–æ—Ä–º–∞—Ç:\n"
                "[{\"name\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\", \"grams\": ..., \"kcal\": ..., \"protein\": ..., \"fat\": ..., \"carb\": ..., \"fiber\": ...}]\n\n"
                "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã. –¢–æ–ª—å–∫–æ JSON. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
            )},
            {"role": "user", "content": desc}
        ]
        try:
            second_response = await client.chat.completions.create(
                model="gpt-4o",
                messages=second_prompt,
                max_tokens=700
            )
            second_content = second_response.choices[0].message.content.strip()
            if second_content.startswith("```"):
                second_content = second_content.replace("```json", "").replace("```", "").strip()
            gpt_items = json.loads(second_content)
            for item in gpt_items:
                results.append({
                    "name": item["name"],
                    "grams": item["grams"],
                    "kcal": round(item["kcal"]),
                    "protein": round(item["protein"], 1),
                    "fat": round(item["fat"], 1),
                    "carb": round(item["carb"], 1),
                    "fiber": round(item["fiber"], 1)
                })
        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ö–ë–ñ–£: {e}")
            return


    total_kcal = total_prot = total_fat = total_carb = total_fiber = 0
    text_lines = ["üçΩÔ∏è –í —Ç–∞—Ä–µ–ª–∫–µ:"]
    not_found_names = {item["name"] for item in not_found if item.get("branded")}

    for r in results:
        total_kcal += r["kcal"]
        total_prot += r["protein"]
        total_fat += r["fat"]
        total_carb += r["carb"]
        total_fiber += r["fiber"]
        mark = " *" if r["name"] in not_found_names else ""
        text_lines.append(f"‚Ä¢ {r['name']}{mark} ‚Äì {r['grams']} –≥ (~{r['kcal']} –∫–∫–∞–ª)")

    text_lines.append(
        f"üìä –ò—Ç–æ–≥–æ: {total_kcal} –∫–∫–∞–ª, –ë–µ–ª–∫–∏: {total_prot} –≥, –ñ–∏—Ä—ã: {total_fat} –≥, "
        f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carb} –≥, –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {round(total_fiber, 1)} –≥"
    )

    if not_found_names:
        text_lines.append("üî∏ * ‚Äî —Ç–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å")

    if len(text_entries_today) == 0 and show_hint:
        text_lines.append("\nüí° –ß—Ç–æ-—Ç–æ –Ω–µ —É—á—ë–ª? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ò—Å–ø—Ä–∞–≤–∏—Ç—å¬ª –∏ –Ω–∞–ø–∏—à–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–º ‚Äî —è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é.\n")
        text_lines.append("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å, –Ω–∞–∂–º–∏ ¬´üçé –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å¬ª –≤–Ω–∏–∑—É. –ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Ç–∫—Ä—ã—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ (–ø–æ—Ö–æ–∂–∞ –Ω–∞ üéõ), –∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏.")

    answer = "\n".join(text_lines)
    answer = round_totals_to_int(answer)

    entry = {
        "prompt": user_text,
        "response": answer,
        "timestamp": now,
        "type": "text",
        "data": results
    }
    await add_history_entry(user_id, entry)

    buttons = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí¨ –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"start_fix:{entry['timestamp'].isoformat()}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_id:{entry['timestamp'].isoformat()}")
    )
    await message.reply(answer, reply_markup=buttons)



@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
async def show_user_profile(message: types.Message):
    user_id = str(message.from_user.id)
    data = await get_user_data(user_id)

    gender = data.get("gender", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    age = data.get("age", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    height = data.get("height", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    weight = data.get("weight", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    target = data.get("goal", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    activity = data.get("activity", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏, –∫–∞–∫ –≤ –∏—Ç–æ–≥–∞—Ö –¥–Ω—è
    calories = data.get("target_kcal", "–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ")
    proteins = data.get("target_protein", "‚Äì")
    fats = data.get("target_fat", "‚Äì")
    carbs = data.get("target_carb", "‚Äì")
    fiber = data.get("target_fiber", "‚Äì")

    text = (
        f"üíÅ‚Äç‚ôÄÔ∏è –í–æ—Ç —á—Ç–æ —è –ø—Ä–æ —Ç–µ–±—è –∑–Ω–∞—é:\n\n"
        f"*–ü–æ–ª:* {gender}\n"
        f"*–í–æ–∑—Ä–∞—Å—Ç:* {age} –ª–µ—Ç\n"
        f"*–†–æ—Å—Ç:* {height} —Å–º\n"
        f"*–í–µ—Å:* {weight} –∫–≥\n"
        f"*–¶–µ–ª—å:* {target}\n"
        f"*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {activity}\n\n"
        f"üìä *–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞ –Ω–∞ –¥–µ–Ω—å:*\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {proteins} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {fats} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n"
        f"‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {fiber} –≥"
    )

    buttons = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("‚öñÔ∏è –£–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –≤–µ—Å", callback_data="update_weight"),
        InlineKeyboardButton("üîÑ –ü–æ–º–µ–Ω—è—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="restart_profile"),
        InlineKeyboardButton("üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/alinaviaphoto")
    )

    await message.reply(text, reply_markup=buttons, parse_mode="Markdown")


@dp.callback_query_handler(lambda c: c.data == "update_weight")
async def update_weight_callback(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    data = await get_user_data(user_id)
    data["profile_stage"] = "edit_weight"
    await update_user_data(user_id, data)
    await bot.send_message(callback_query.from_user.id, "‚úèÔ∏è –í–≤–µ–¥–∏ *—Ç–µ–∫—É—â–∏–π –≤–µ—Å* –≤ –∫–≥ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", parse_mode="Markdown")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "restart_profile")
async def restart_profile_callback(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    data = await get_user_data(user_id)
    data["profile_stage"] = "gender"
    await update_user_data(user_id, data)

    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–ú—É–∂", callback_data="gender:–º—É–∂"),
        InlineKeyboardButton("–ñ–µ–Ω", callback_data="gender:–∂–µ–Ω")
    )

    await bot.send_message(
        callback_query.from_user.id,
        "üîÑ –•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=kb
    )
    await callback_query.answer()


@dp.message_handler(fix_mode=False)
async def handle_text_food(message: types.Message):
    user_id = str(message.from_user.id)
    now = datetime.now()
    data = await get_user_data(user_id)
    usage_count = data.get("usage_count", 0)
    show_hint = usage_count < 2
    data["usage_count"] = usage_count + 1
    await update_user_data(user_id, data)

    history_list = await get_history(user_id)
    user_offset = data.get("utc_offset", 0)
    today = datetime.utcnow().astimezone(timezone(timedelta(hours=user_offset))).date()
    text_entries_today = [e for e in history_list if e.get("type") == "text" and e["timestamp"].date() == today]
    if len(text_entries_today) >= 60:
        await message.reply("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ 10 –æ–ø–∏—Å–∞–Ω–∏–π –µ–¥—ã. –ù–æ–≤—ã–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞.")
        return

    user_text = message.text.strip()
    if len(user_text) < 5:
        await message.reply("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –µ–¥—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ü—Ä–∏–º–µ—Ä: ¬´–ë—É–ª–æ—á–∫–∞ —Å –∫–æ—Ä–∏—Ü–µ–π —Ä–∞–∑–º–µ—Ä–æ–º —Å –ª–∞–¥–æ–Ω—å –∏ –∫–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º 250 –º–ª¬ª")
        return

    await message.reply("–°—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏...", reply_markup=persistent_keyboard)

    try:
        client = get_openai_client()
        messages = [
            {"role": "system", "content": (
                "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –æ–Ω –µ–ª.\n\n"
                "–û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–Ω —É–ø–æ–º—è–Ω—É–ª –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ (–≤ –≥—Ä–∞–º–º–∞—Ö).\n\n"
                "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
                "[{\"name\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\", \"grams\": —á–∏—Å–ª–æ}]\n\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û:\n"
                "- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≥—Ä–µ—á–∫–∞ –≤–∞—Ä—ë–Ω–∞—è¬ª, ¬´–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –∂–∞—Ä–µ–Ω–∞—è¬ª, ¬´–±–∞–Ω–∞–Ω¬ª)\n"
                "- –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ô–æ–≥—É—Ä—Ç Epica –º–∞–Ω–≥–æ¬ª), –ø–æ–º–µ—Ç—å –µ–≥–æ –∫–∞–∫ branded: true\n"
                "- –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî branded: false\n"
                "- –ù–µ –æ—Ü–µ–Ω–∏–≤–∞–π –ö–ë–ñ–£ —Å–∞–º\n"
                "- –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π"
            )},
            {"role": "user", "content": user_text}
        ]
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0,
            max_tokens=700
        )
        content = response.choices[0].message.content.strip()
        if content.startswith("```"):
            content = content.replace("```json", "").replace("```", "").strip()

        food_items = json.loads(content)
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n{e}")
        return

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –¥–≤—É–º—è —Ç–∞–±–ª–∏—Ü–∞–º–∏
    results = []
    not_found = []
    for item in food_items:
        name = item["name"]
        grams = item["grams"]
        is_branded = item.get("branded", False)

        cached = product_cache.get(name.lower())
        if cached:
            nutr = cached
            matched_name = name
        else:
            if is_branded:
                matched = await match_product_name_to_brand_table(name)
            else:
                matched = await match_product_name_to_ready_table(name)

            if matched:
                nutr = {
                    "kcal": matched["kcal"],
                    "protein": matched["protein"],
                    "fat": matched["fat"],
                    "carb": matched["carb"],
                    "fiber": matched["fiber"]
                }
                product_cache[name.lower()] = nutr
                matched_name = matched["matched_name"]
            else:
                nutr = None
                matched_name = name

        if nutr:
            logging.info(f"[‚úÖ –ò–∑ –ë–î] {matched_name} ‚Äî {grams} –≥")
            results.append({
                "name": matched_name,
                "grams": grams,
                "kcal": round(nutr["kcal"] * grams / 100),
                "protein": round(nutr["protein"] * grams / 100, 1),
                "fat": round(nutr["fat"] * grams / 100, 1),
                "carb": round(nutr["carb"] * grams / 100, 1),
                "fiber": round(nutr["fiber"] * grams / 100, 1)
            })
        else:
            logging.warning(f"[‚ùå GPT —Å–∞–º —Å—á–∏—Ç–∞–µ—Ç] {name} ‚Äî {grams} –≥")
            not_found.append({"name": name, "grams": grams, "branded": is_branded})

    # –í—Ç–æ—Ä–æ–π GPT-–∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not_found:
        desc = "\n".join([f"{item['name']} ‚Äì {item['grams']} –≥" for item in not_found])
        second_prompt = [
            {"role": "system", "content": (
                "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –†–∞—Å—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –≤–µ—Å–æ–º.\n\n"
                "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
                "[{\"name\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\", \"grams\": ..., \"kcal\": ..., \"protein\": ..., \"fat\": ..., \"carb\": ..., \"fiber\": ...}]\n\n"
                "‚ö†Ô∏è –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
                "‚ö†Ô∏è –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
            )},
            {"role": "user", "content": desc}
        ]
        try:
            second_response = await client.chat.completions.create(
                model="gpt-4o",
                temperature=0,
                messages=second_prompt,
                max_tokens=700
            )
            second_content = second_response.choices[0].message.content.strip()
            if second_content.startswith("```"):
                second_content = second_content.replace("```json", "").replace("```", "").strip()
            gpt_items = json.loads(second_content)
            for item in gpt_items:
                logging.warning(f"[üß† –ü—Ä–∏–¥—É–º–∞–Ω–æ GPT] {item['name']} ‚Äî {item['grams']} –≥")
                results.append({
                    "name": item["name"],
                    "grams": item["grams"],
                    "kcal": round(item["kcal"]),
                    "protein": round(item["protein"], 1),
                    "fat": round(item["fat"], 1),
                    "carb": round(item["carb"], 1),
                    "fiber": round(item["fiber"], 1)
                })
        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ö–ë–ñ–£: {e}")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥
    total_kcal = total_prot = total_fat = total_carb = total_fiber = 0
    text_lines = ["üçΩÔ∏è –í —Ç–∞—Ä–µ–ª–∫–µ:"]
    not_found_names = {item["name"] for item in not_found if item.get("branded")}

    for r in results:
        total_kcal += r["kcal"]
        total_prot += r["protein"]
        total_fat += r["fat"]
        total_carb += r["carb"]
        total_fiber += r["fiber"]

        mark = " *" if r["name"] in not_found_names else ""
        text_lines.append(f"‚Ä¢ {r['name']}{mark} ‚Äì {r['grams']} –≥ (~{r['kcal']} –∫–∫–∞–ª)")

    text_lines.append(
        f"üìä –ò—Ç–æ–≥–æ: {total_kcal} –∫–∫–∞–ª, –ë–µ–ª–∫–∏: {total_prot} –≥, –ñ–∏—Ä—ã: {total_fat} –≥, "
        f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carb} –≥, –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {round(total_fiber, 1)} –≥"
    )

    if not_found_names:
        text_lines.append("üî∏ * ‚Äî —Ç–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å")

    if len(text_entries_today) == 0 and show_hint:
        text_lines.append("\nüí° –ß—Ç–æ-—Ç–æ –Ω–µ —É—á—ë–ª? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ò—Å–ø—Ä–∞–≤–∏—Ç—å¬ª –∏ –Ω–∞–ø–∏—à–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–º ‚Äî —è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é.\n")
        text_lines.append("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å, –Ω–∞–∂–º–∏ ¬´üçé –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å¬ª –≤–Ω–∏–∑—É. –ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Ç–∫—Ä—ã—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ (–ø–æ—Ö–æ–∂–∞ –Ω–∞ üéõ), –∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏.")

    answer = "\n".join(text_lines)
    answer = round_totals_to_int(answer)

    entry = {
        "prompt": user_text,
        "response": answer,
        "timestamp": now,
        "type": "text",
        "data": results
    }
    await add_history_entry(user_id, entry)

    buttons = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí¨ –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"start_fix:{entry['timestamp'].isoformat()}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_id:{entry['timestamp'].isoformat()}")
    )
    await message.reply(answer, reply_markup=buttons)


from io import BytesIO

@dp.message_handler(content_types=[ContentType.TEXT, ContentType.VOICE, ContentType.AUDIO], fix_mode=True)
async def handle_fix_input(message: types.Message):
    user_id = str(message.from_user.id)
    now = datetime.now()
    data = await get_user_data(user_id)

    # ‚õî –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∂–∏–º, –µ—Å–ª–∏ fix_mode –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    timestamp_str = data.get("fix_mode")
    if not timestamp_str:
        data["fix_mode"] = None
        data["prompts"] = []
        await update_user_data(user_id, data)
        await message.reply("‚ö†Ô∏è –†–µ–∂–∏–º '–∏—Å–ø—Ä–∞–≤–∏—Ç—å' —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–¥—É –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        target_ts = datetime.fromisoformat(timestamp_str)
    except:
        data["fix_mode"] = None
        data["prompts"] = []
        await update_user_data(user_id, data)
        await message.reply("‚ö†Ô∏è –î–∞—Ç–∞ —Ä–µ–∂–∏–º–∞ '–∏—Å–ø—Ä–∞–≤–∏—Ç—å' –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –†–µ–∂–∏–º —Å–±—Ä–æ—à–µ–Ω.")
        return

    history_list = await get_history(user_id)
    matched_entries = [e for e in history_list if e["timestamp"] == target_ts]
    if not matched_entries:
        data["fix_mode"] = None
        data["prompts"] = []
        await update_user_data(user_id, data)
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –†–µ–∂–∏–º —Å–±—Ä–æ—à–µ–Ω.")
        return

    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∞—É–¥–∏–æ
    if message.text:
        user_fix = message.text.strip()
    else:
        await message.reply("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...")
        try:
            file_id = message.voice.file_id if message.voice else message.audio.file_id
            file = await bot.get_file(file_id)
            file_bytes = await bot.download_file(file.file_path)

            audio_file = BytesIO(file_bytes.getvalue())
            audio_file.name = "audio.ogg"

            client = get_openai_client()
            transcript_response = await client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text",
                prompt="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–æ—Å–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –µ–¥–µ. –†–∞—Å–ø–æ–∑–Ω–∞–π –µ–≥–æ –≥–æ–ª–æ—Å."
            )
            user_fix = transcript_response.strip()
        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å: {e}")
            return

    if len(user_fix) < 5:
        await message.reply("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.")
        return

    await message.reply("–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é...")

    data.setdefault("prompts", [])
    data["prompts"].append(user_fix)
    await update_user_data(user_id, data)

    history_list = await get_history(user_id)
    user_offset = data.get("utc_offset", 0)
    today = datetime.utcnow().astimezone(timezone(timedelta(hours=user_offset))).date()
    timestamp_str = data.get("fix_mode")
    if not timestamp_str:
        data["fix_mode"] = None
        data["prompts"] = []
        await update_user_data(user_id, data)
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å. –†–µ–∂–∏–º '–ò—Å–ø—Ä–∞–≤–∏—Ç—å' —Å–±—Ä–æ—à–µ–Ω.")
        return

    target_ts = datetime.fromisoformat(timestamp_str)

    # –ò—â–µ–º —Ç–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ timestamp
    previous_entries = [e for e in history_list if e["timestamp"] == target_ts]
    if not previous_entries:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    previous_entry = previous_entries[0]
    previous_response = previous_entry["response"]
    previous_type = previous_entry["type"]
    previous_data = previous_entry.get("data", [])

    previous_type = previous_entries[0]["type"] if previous_entries else ""
    previous_data = previous_entries[0].get("data", [])

    previous_response_text = previous_response

    system_prompt = (
        "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –±–ª—é–¥–æ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç), –∞ –ø–æ—Ç–æ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ —É—Ç–æ—á–Ω–µ–Ω–∏–∏. "
        "–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ù–ï –ò–ó–ú–ï–ù–Ø–ô. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–ø–∏—à–∏ –∏—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. "
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–∏ –∏ –≤—Å–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã, –∫–ª–µ—Ç—á–∞—Ç–∫—É), –¥–∞–∂–µ –µ—Å–ª–∏ –º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥—Ä–∞–º–º—ã! "
        "–ù–µ –∫–æ–ø–∏—Ä—É–π —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞–π –∏—Ö –∑–∞–Ω–æ–≤–æ –ø–æ –Ω–æ–≤—ã–º –≥—Ä–∞–º–º–∞–º. –í–Ω–∏–∑—É —Å–Ω–æ–≤–∞ –≤—ã–≤–µ–¥–∏ –æ–±—â–∏–π –∏—Ç–æ–≥.\n\n"
        "–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –æ—Ç —Å–µ–±—è. –ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.\n\n"
        "–í—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "üçΩÔ∏è –°—ä–µ–¥–µ–Ω–æ:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äì –≥—Ä–∞–º–º—ã (~–∫–∫–∞–ª)\n"
        "üìä –ò—Ç–æ–≥–æ: –• –∫–∫–∞–ª, –ë–µ–ª–∫–∏: –• –≥, –ñ–∏—Ä—ã: –• –≥, –£–≥–ª–µ–≤–æ–¥—ã: –• –≥, –ö–ª–µ—Ç—á–∞—Ç–∫–∞: –• –≥"
    )

    try:
        openai_client = get_openai_client()
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n{previous_response_text}\n\n–ù–æ–≤–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ:\n{user_fix}"}
            ],
            max_tokens=700
        )

        answer = response.choices[0].message.content
        answer = round_totals_to_int(answer)

        buttons = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üí¨ –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"start_fix:{now.isoformat()}"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_id:{now.isoformat()}")
        )
        await message.reply(answer, reply_markup=buttons)

        if previous_entries:
            old_entry = previous_entries[0]
            try:
                async with async_session() as session:
                    async with session.begin():
                        await session.execute(delete(UserHistory).where(
                            UserHistory.user_id == user_id,
                            UserHistory.timestamp == old_entry["timestamp"]
                        ))
            except Exception as e:
                logging.error(f"Failed to delete previous entry: {e}")

        new_entry = {
            "prompt": "\n".join(data.get("prompts", [])),
            "response": answer,
            "timestamp": now,
            "type": previous_type or "text"
        }
        await add_history_entry(user_id, new_entry)

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT –∏–ª–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    finally:
        data["fix_mode"] = None
        data["prompts"] = []
        await update_user_data(user_id, data)

        try:
            last_messages = await bot.get_chat_history(message.chat.id, limit=3)
            for msg in last_messages:
                if msg.from_user.id == (await bot.me).id and msg.reply_markup:
                    await bot.edit_message_reply_markup(chat_id=msg.chat.id, message_id=msg.message_id, reply_markup=None)
                    break
        except:
            pass





@dp.message_handler(content_types=ContentType.WEB_APP_DATA)
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)

        if data.get("type") == "get_summary":
            user_id = str(message.from_user.id)
            date_str = data.get("date")

            summary_text = await calculate_summary_text(user_id, date_str)

            await bot.send_message(
                chat_id=message.chat.id,
                text=json.dumps({"type": "summary", "text": summary_text})
            )

        elif data.get("type") == "delete_entry":
            entry_id = data.get("id")

            # üî• –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î –ø–æ ID
            async with async_session() as session:
                await session.execute(
                    delete(History).where(History.id == entry_id)
                )
                await session.commit()

            await message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ –±–ª—é–¥–æ —Å ID {entry_id}")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebApp: {str(e)}")






# Startup and shutdown events
async def on_startup(dp):
    await load_products_from_db()
    # Ensure database tables exist
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(send_morning_reminders())
    asyncio.create_task(clean_old_photos())

    logging.info("üöÄ Bot started, DB initialized, webhook set.")

async def on_shutdown(dp):
    logging.info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ...")


from aiohttp import web

WEBHOOK_PATH = "/webhook/7828260564:AAHv_NqPmR8M-1IMjrXXPKwI-g6bXHsI-IM"
WEBHOOK_URL = f"https://via-alina-bot-webhook.onrender.com{WEBHOOK_PATH}"

async def handle_index(request):
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

async def handle_webhook(request):
    try:
        request_data = await request.json()
        update = types.Update.to_object(request_data)
        await asyncio.wait_for(dp.process_update(update), timeout=25)
    except asyncio.TimeoutError:
        logging.error("‚è± –í–µ–±—Ö—É–∫ –∑–∞–≤–∏—Å ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 25 —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
    return web.Response()

def normalize_name(text: str) -> str:
    return text.lower().replace("—ë", "–µ").strip()

async def match_product_name_to_table(name: str, table_name: str) -> dict | None:
    async with async_session() as session:
        result = await session.execute(text(f"SELECT name, kcal, protein, fat, carb, fiber FROM {table_name}"))
        rows = result.fetchall()

    norm_name = normalize(name)
    name_list = [normalize(row[0]) for row in rows]
    match = process.extractOne(norm_name, name_list, scorer=fuzz.token_set_ratio)

    if match and match[1] >= 85:
        for row in rows:
            if normalize(row[0]) == match[0]:
                return {
                    "matched_name": row[0],
                    "kcal": row[1],
                    "protein": row[2],
                    "fat": row[3],
                    "carb": row[4],
                    "fiber": row[5]
                }
    return None

# üîç –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –±–µ–∑ –±—Ä–µ–Ω–¥–æ–≤
async def match_product_name_to_ready_table(name: str) -> dict | None:
    return await match_product_name_to_table(name, "products")

# üîç –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –±—Ä–µ–Ω–¥–æ–≤
async def match_product_name_to_brand_table(name: str) -> dict | None:
    return await match_product_name_to_table(name, "productbrend")


app = web.Application()
app.router.add_get("/", handle_index)
app.router.add_post(WEBHOOK_PATH, handle_webhook)

async def startup_wrapper(app):
    await on_startup(dp)

async def shutdown_wrapper(app):
    await on_shutdown(dp)

app.on_startup.append(startup_wrapper)
app.on_shutdown.append(shutdown_wrapper)

if __name__ == '__main__':

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    bot.set_current(bot)
    dp.set_current(dp)

    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))