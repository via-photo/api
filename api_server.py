from fastapi import FastAPI, HTTPException, Depends, Header, Query
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uvicorn
import os
from dotenv import load_dotenv
import sys
import json
from datetime import datetime, timedelta, date, timezone
import re
from functools import lru_cache
import hashlib
import time
from sqlalchemy import text

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI(title="Telegram Bot WebApp API", 
              description="API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebApp —Å Telegram –±–æ—Ç–æ–º —Ç—Ä–µ–∫–µ—Ä–∞ –ø–∏—Ç–∞–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å Netlify
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
class APICache:
    def __init__(self):
        self.cache = {}
        self.cache_ttl = {}
        self.default_ttl = 300  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def get_cache_key(self, prefix: str, user_id: str, **kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞"""
        key_parts = [prefix, user_id]
        for k, v in sorted(kwargs.items()):
            key_parts.append(f"{k}={v}")
        key_data = ":".join(key_parts)
        return hashlib.md5(key_data.encode()).hexdigest()
    
    def get(self, key: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏"""
        if key in self.cache:
            if time.time() < self.cache_ttl.get(key, 0):
                return self.cache[key]
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                self.cache.pop(key, None)
                self.cache_ttl.pop(key, None)
        return None
    
    def set(self, key: str, value, ttl: int = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        self.cache[key] = value
        self.cache_ttl[key] = time.time() + (ttl or self.default_ttl)
    
    def invalidate_user_cache(self, user_id: str):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –∫—ç—à–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        possible_prefixes = ["day_summary", "diary", "stats", "recipes", "profile", "diary_data"]
        keys_to_remove = []
        
        for prefix in possible_prefixes:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            key = self.get_cache_key(prefix, user_id)
            if key in self.cache:
                keys_to_remove.append(key)
            
            # –î–ª—è diary_data —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
            if prefix == "diary_data":
                for days_offset in range(-7, 8):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥ –∏ –≤–ø–µ—Ä–µ–¥
                    from datetime import datetime, timedelta
                    date = datetime.now() + timedelta(days=days_offset)
                    date_str = date.strftime("%Y-%m-%d")
                    key_with_date = self.get_cache_key(prefix, user_id, date=date_str)
                    if key_with_date in self.cache:
                        keys_to_remove.append(key_with_date)
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —Å "today"
                key_today = self.get_cache_key(prefix, user_id, date="today")
                if key_today in self.cache:
                    keys_to_remove.append(key_today)
        
        for key in keys_to_remove:
            self.cache.pop(key, None)
            self.cache_ttl.pop(key, None)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
api_cache = APICache()

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
@lru_cache(maxsize=1000)
def parse_nutrition_cached(response_text: str) -> tuple:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ë–ñ–£ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
    match = re.search(
        r'–ò—Ç–æ–≥–æ:\s*[~‚âà]?\s*(\d+\.?\d*)\s*–∫–∫–∞–ª.*?'
        r'–ë–µ–ª–∫–∏[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
        r'–ñ–∏—Ä—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
        r'–£–≥–ª–µ–≤–æ–¥—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
        r'–ö–ª–µ—Ç—á–∞—Ç–∫–∞[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥',
        response_text, flags=re.IGNORECASE | re.DOTALL
    )
    
    if match:
        kcal, prot, fat, carb = map(lambda x: round(float(x)), match.groups()[:4])
        fiber = round(float(match.groups()[4]), 1)
        return kcal, prot, fat, carb, fiber
    
    return 0, 0, 0, 0, 0.0

@lru_cache(maxsize=500)
def parse_products_cached(response_text: str) -> str:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
    lines = response_text.splitlines()
    food_lines = [line for line in lines if line.strip().startswith(("‚Ä¢", "-"))]
    return ", ".join([re.sub(r'^[‚Ä¢\-]\s*', '', line).split("‚Äì")[0].strip() for line in food_lines]) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class MealEntry(BaseModel):
    time: str
    name: str
    calories: int
    items: List[Dict[str, Any]]
    image: Optional[str] = None  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64

class DiaryDay(BaseModel):
    date: str
    total_calories: int
    meals: List[MealEntry]

class NutritionStats(BaseModel):
    calories: int
    protein: int
    fat: int
    carb: int
    fiber: float

class UserStats(BaseModel):
    avg_calories: int
    days_tracked: int
    adherence_percent: int
    weight_change: float
    nutrition_distribution: Dict[str, int]
    top_products: List[Dict[str, Any]]

class Recipe(BaseModel):
    title: str
    category: str
    prep_time: str
    calories: int
    description: str
    portions: int
    nutrition: NutritionStats

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProfileUpdateData(BaseModel):
    gender: Optional[str] = None
    age: Optional[int] = None
    height: Optional[int] = None
    weight: Optional[float] = None
    goal: Optional[float] = None
    activity: Optional[str] = None
    pregnant: Optional[bool] = None
    utc_offset: Optional[int] = None
    morning_reminders_enabled: Optional[bool] = None

# –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
class DaySummary(BaseModel):
    date: str
    total_calories: int
    total_protein: int
    total_fat: int
    total_carb: int
    total_fiber: float
    meals: List[Dict[str, Any]]
    remaining_calories: int
    remaining_protein: int
    remaining_fat: int
    remaining_carb: int
    remaining_fiber: float
    warnings: List[str]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API-–∫–ª—é—á–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
async def verify_api_key(x_api_key: str = Header(None)):
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return x_api_key or "debug_key"

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç API
@app.get("/api")
async def api_root():
    return {"status": "success", "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç", "timestamp": datetime.now().isoformat()}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
@app.get("/api/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

# –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
@app.get("/api/day-summary/{user_id}", response_model=Dict[str, Any])
async def get_day_summary(user_id: str, date_str: Optional[str] = None, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = api_cache.get_cache_key("day_summary", user_id, date=date_str or "today")
        cached_result = api_cache.get(cache_key)
        if cached_result:
            return cached_result
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_user_data, get_history
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ get_day_summary: {import_error}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ bot.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            target_date = date_str or datetime.now().strftime("%Y-%m-%d")
            result = {
                "status": "success", 
                "data": {
                    "date": target_date,
                    "total_calories": 1500,
                    "total_protein": 80,
                    "total_fat": 50,
                    "total_carb": 180,
                    "total_fiber": 15.5,
                    "meals": [
                        {
                            "id": 1,
                            "time": "08:30",
                            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≤—Ç—Ä–∞–∫",
                            "calories": 400,
                            "protein": 20,
                            "fat": 15,
                            "carb": 50
                        }
                    ],
                    "remaining_calories": 500,
                    "remaining_protein": 20,
                    "remaining_fat": 17,
                    "remaining_carb": 70,
                    "remaining_fiber": 9.5,
                    "warnings": ["üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"],
                    "message": "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (bot.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                }
            }
            # –ö—ç—à–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            api_cache.set(cache_key, result, ttl=60)
            return result
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        user_offset = user_data.get("utc_offset", 0)
        user_tz = timezone(timedelta(hours=user_offset))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if date_str:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        else:
            target_date = datetime.now(user_tz).date()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = await get_history(user_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ)
        entries_today = [e for e in history if e["timestamp"].astimezone(user_tz).date() == target_date and e.get("type") in ["food", "text"]]
        
        if not entries_today:
            result = {
                "status": "success", 
                "data": {
                    "date": target_date.strftime("%Y-%m-%d"),
                    "total_calories": 0,
                    "total_protein": 0,
                    "total_fat": 0,
                    "total_carb": 0,
                    "total_fiber": 0,
                    "meals": [],
                    "remaining_calories": user_data.get("target_kcal", 0),
                    "remaining_protein": user_data.get("target_protein", 0),
                    "remaining_fat": user_data.get("target_fat", 0),
                    "remaining_carb": user_data.get("target_carb", 0),
                    "remaining_fiber": user_data.get("target_fiber", 20),
                    "warnings": [],
                    "message": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞."
                }
            }
            # –ö—ç—à–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            api_cache.set(cache_key, result, ttl=180)
            return result
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        total_kcal = total_prot = total_fat = total_carb = total_fiber = 0.0
        meals = []
        
        for i, entry in enumerate(entries_today, start=1):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –ë–ñ–£
            kcal, prot, fat, carb, fiber = parse_nutrition_cached(entry['response'])
            
            total_kcal += kcal
            total_prot += prot
            total_fat += fat
            total_carb += carb
            total_fiber += fiber
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            short_desc = parse_products_cached(entry['response'])
            
            meals.append({
                "id": i,
                "time": entry['timestamp'].strftime("%H:%M"),
                "description": short_desc,
                "calories": kcal,
                "protein": prot,
                "fat": fat,
                "carb": carb,
                "fiber": fiber,
                "full_response": entry['response'],
                "timestamp": entry['timestamp'].isoformat(),
                "image": entry.get('compressed_image')  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            })
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        target_kcal = int(user_data.get("target_kcal", 0))
        target_protein = int(user_data.get("target_protein", 0))
        target_fat = int(user_data.get("target_fat", 0))
        target_carb = int(user_data.get("target_carb", 0))
        target_fiber = int(user_data.get("target_fiber", 20))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        remaining_kcal = target_kcal - total_kcal
        remaining_prot = target_protein - total_prot
        remaining_fat = target_fat - total_fat
        remaining_carb = target_carb - total_carb
        remaining_fiber = target_fiber - total_fiber
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = []
        if remaining_kcal < 0:
            maintenance_kcal = int(target_kcal / 0.83) if target_kcal else 0
            if total_kcal <= maintenance_kcal and user_data.get("goal", 0) < user_data.get("weight", 0):
                warnings.append(
                    f"‚öñÔ∏è –ü–æ –∫–∞–ª–æ—Ä–∏—è–º —É–∂–µ –ø–µ—Ä–µ–±–æ—Ä –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è, –Ω–æ —Ç—ã –≤—Å—ë –µ—â—ë –≤ —Ä–∞–º–∫–∞—Ö –Ω–æ—Ä–º—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞ ‚Äî –¥–æ –Ω–µ—ë –µ—â—ë {maintenance_kcal - total_kcal} –∫–∫–∞–ª. –í–µ—Å –Ω–µ –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π üòä"
                )
            else:
                warnings.append("üç© –ö–∞–ª–æ—Ä–∏–π –≤—ã—à–ª–æ —á—É—Ç—å –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –Ω–æ –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ —á—É—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ üòâ")
        
        if remaining_prot < 0:
            warnings.append("ü•© –ë–µ–ª–∫–∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å –±–æ–ª—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ.")
        
        if remaining_fat < 0:
            warnings.append("üßà –ñ–∏—Ä–æ–≤ –≤—ã—à–ª–æ –º–Ω–æ–≥–æ–≤–∞—Ç–æ ‚Äî –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, –º–æ–∂–µ—Ç –≥–¥–µ-—Ç–æ –º–∞—Å–ª–æ –ª–∏—à–Ω–µ–µ.")
        
        if remaining_carb < 0:
            warnings.append("üçû –£–≥–ª–µ–≤–æ–¥–æ–≤ –ø–µ—Ä–µ–±–æ—Ä ‚Äî –º–æ–∂–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –º–Ω–æ–≥–æ —Å–ª–∞–¥–∫–æ–≥–æ?")
        
        summary_data = {
            "date": target_date.strftime("%Y-%m-%d"),
            "total_calories": int(total_kcal),
            "total_protein": int(total_prot),
            "total_fat": int(total_fat),
            "total_carb": int(total_carb),
            "total_fiber": round(total_fiber, 1),
            "meals": meals,
            "remaining_calories": max(0, remaining_kcal),
            "remaining_protein": max(0, remaining_prot),
            "remaining_fat": max(0, remaining_fat),
            "remaining_carb": max(0, remaining_carb),
            "remaining_fiber": max(0, round(remaining_fiber, 1)),
            "warnings": warnings,
            "targets": {
                "calories": target_kcal,
                "protein": target_protein,
                "fat": target_fat,
                "carb": target_carb,
                "fiber": target_fiber
            }
        }
        
        result = {"status": "success", "data": summary_data}
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
        api_cache.set(cache_key, result, ttl=180)
        return result
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API
@app.get("/api/diary/{user_id}", response_model=Dict[str, Any])
async def get_diary(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = api_cache.get_cache_key("diary", user_id)
        cached_result = api_cache.get(cache_key)
        if cached_result:
            return cached_result
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_user_data, get_history
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ get_diary: {import_error}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ bot.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            result = {
                "status": "success", 
                "data": {
                    "days": [
                        {
                            "date": "06.08.2025",
                            "total_calories": 1800,
                            "meals": [
                                {
                                    "time": "08:30",
                                    "name": "–ó–∞–≤—Ç—Ä–∞–∫",
                                    "calories": 400,
                                    "items": [{"name": "–û–≤—Å—è–Ω–∫–∞", "calories": 150}]
                                }
                            ]
                        }
                    ],
                    "user_targets": {
                        "calories": 2000,
                        "protein": 100,
                        "fat": 67,
                        "carb": 250,
                        "fiber": 25
                    }
                }
            }
            # –ö—ç—à–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            api_cache.set(cache_key, result, ttl=60)
            return result
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = await get_history(user_id)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        diary_data = {
            "days": [],
            "user_targets": {
                "calories": user_data.get("target_kcal", 2000),
                "protein": user_data.get("target_protein", 100),
                "fat": user_data.get("target_fat", 67),
                "carb": user_data.get("target_carb", 250),
                "fiber": user_data.get("target_fiber", 25)
            }
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
        days_dict = {}
        for entry in history:
            # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ: –∏ —Å —Ñ–æ—Ç–æ (type="food"), –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ/–≥–æ–ª–æ—Å–æ–≤—ã–µ (type="text")
            if entry.get("type") not in ["food", "text"]:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ timestamp
            entry_date = entry.get("timestamp").date() if isinstance(entry.get("timestamp"), datetime) else datetime.fromisoformat(entry.get("timestamp")).date()
            date_str = entry_date.strftime("%Y-%m-%d")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if date_str not in days_dict:
                days_dict[date_str] = {
                    "date": entry_date.strftime("%d.%m.%Y"),
                    "total_calories": 0,
                    "meals": []
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            calories = 0
            match = re.search(r"(\d+(?:[.,]\d+)?) –∫–∫–∞–ª", entry.get("response", ""))
            if match:
                calories = int(float(match.group(1).replace(",", ".")))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            items = []
            for line in entry.get("response", "").split("\n"):
                if line.strip().startswith("‚Ä¢") or line.strip().startswith("-"):
                    item_parts = line.strip()[1:].strip().split("‚Äì")
                    if len(item_parts) >= 2:
                        item_name = item_parts[0].strip()
                        item_calories = 0
                        cal_match = re.search(r"(\d+(?:[.,]\d+)?) –∫–∫–∞–ª", item_parts[1])
                        if cal_match:
                            item_calories = int(float(cal_match.group(1).replace(",", ".")))
                        items.append({"name": item_name, "calories": item_calories})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–µ–º –ø–∏—â–∏
            meal_time = entry_date.strftime("%H:%M")
            if "timestamp" in entry and isinstance(entry.get("timestamp"), datetime):
                meal_time = entry.get("timestamp").strftime("%H:%M")
            
            meal_name = "–ü—Ä–∏–µ–º –ø–∏—â–∏"
            if "–∑–∞–≤—Ç—Ä–∞–∫" in entry.get("prompt", "").lower():
                meal_name = "–ó–∞–≤—Ç—Ä–∞–∫"
            elif "–æ–±–µ–¥" in entry.get("prompt", "").lower():
                meal_name = "–û–±–µ–¥"
            elif "—É–∂–∏–Ω" in entry.get("prompt", "").lower():
                meal_name = "–£–∂–∏–Ω"
            elif "–ø–µ—Ä–µ–∫—É—Å" in entry.get("prompt", "").lower():
                meal_name = "–ü–µ—Ä–µ–∫—É—Å"
            
            days_dict[date_str]["meals"].append({
                "time": meal_time,
                "name": meal_name,
                "calories": calories,
                "items": items
            })
            
            days_dict[date_str]["total_calories"] += calories
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        sorted_days = sorted(days_dict.values(), key=lambda x: datetime.strptime(x["date"], "%d.%m.%Y"), reverse=True)
        diary_data["days"] = sorted_days
        
        result = {"status": "success", "data": diary_data}
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
        api_cache.set(cache_key, result, ttl=300)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/stats/{user_id}", response_model=Dict[str, Any])
async def get_stats(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = api_cache.get_cache_key("stats", user_id)
        cached_result = api_cache.get(cache_key)
        if cached_result:
            return cached_result
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_user_data, get_history, calculate_summary_text
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ get_stats: {import_error}")
            # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            # return —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –£–ë–ò–†–ê–ï–ú –≠–¢–û
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_data = await get_user_data(user_id)
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_data = {
                "target_kcal": 2000,
                "target_protein": 100,
                "target_fat": 67,
                "target_carb": 250,
                "target_fiber": 25,
                "utc_offset": 0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            history = await get_history(user_id)
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            history = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ (food –∏ text —Ç–∏–ø—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–¥–µ)
        food_entries = [entry for entry in history if entry.get("type") in ["food", "text"]]
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ –≤—ã–≤–æ–¥–∞)
        types_count = {}
        for entry in history:
            entry_type = entry.get("type", "unknown")
            types_count[entry_type] = types_count.get(entry_type, 0) + 1
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not food_entries:
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            stats_data = {
                "general": {
                    "avg_calories": 0,
                    "days_tracked": 0,
                    "adherence_percent": 0,
                    "weight_change": 0
                },
                "nutrition_distribution": {
                    "protein": 33,
                    "fat": 33,
                    "carb": 34
                },
                "top_products": [],
                "user_targets": {
                    "calories": user_data.get("target_kcal", 2000),
                    "protein": user_data.get("target_protein", 100),
                    "fat": user_data.get("target_fat", 67),
                    "carb": user_data.get("target_carb", 250),
                    "fiber": user_data.get("target_fiber", 25)
                },
                "today_summary": None
            }
            return {"status": "success", "data": stats_data}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–Ω–µ–π
        days = {}
        total_calories = 0
        total_protein = 0
        total_fat = 0
        total_carb = 0
        total_fiber = 0
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        for i, entry in enumerate(food_entries):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ timestamp
                timestamp = entry.get("timestamp")
                if isinstance(timestamp, datetime):
                    entry_date = timestamp.date()
                else:
                    entry_date = datetime.fromisoformat(str(timestamp)).date()
                date_str = entry_date.strftime("%Y-%m-%d")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if date_str not in days:
                    days[date_str] = {
                        "calories": 0,
                        "protein": 0,
                        "fat": 0,
                        "carb": 0,
                        "fiber": 0
                    }
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –ë–ñ–£ (–∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö)
                response = entry.get("response", "")
                kcal, prot, fat, carb, fiber = parse_nutrition_cached(response)
                
                if kcal > 0:  # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    days[date_str]["calories"] += kcal
                    days[date_str]["protein"] += prot
                    days[date_str]["fat"] += fat
                    days[date_str]["carb"] += carb
                    days[date_str]["fiber"] += fiber
                    
                    total_calories += kcal
                    total_protein += prot
                    total_fat += fat
                    total_carb += carb
                    total_fiber += fiber
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i+1}: {e}")
                continue
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        days_tracked = len(days)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∫–∞–ª–æ—Ä–∏–π - —É—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
        if food_entries:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
            sorted_entries = sorted(food_entries, key=lambda x: x.get("timestamp") if isinstance(x.get("timestamp"), datetime) else datetime.fromisoformat(str(x.get("timestamp"))))
            first_date = sorted_entries[0].get("timestamp")
            last_date = sorted_entries[-1].get("timestamp")
            
            if isinstance(first_date, str):
                first_date = datetime.fromisoformat(first_date)
            if isinstance(last_date, str):
                last_date = datetime.fromisoformat(last_date)
                
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
            total_period_days = (last_date.date() - first_date.date()).days + 1
            avg_calories = round(total_calories / total_period_days) if total_period_days > 0 else 0
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        else:
            avg_calories = 0
        
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ë–ñ–£
        total_nutrients = total_protein + total_fat + total_carb
        
        protein_percent = round((total_protein / total_nutrients * 100) if total_nutrients > 0 else 0)
        fat_percent = round((total_fat / total_nutrients * 100) if total_nutrients > 0 else 0)
        carb_percent = round((total_carb / total_nutrients * 100) if total_nutrients > 0 else 0)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        daily_data = []
        if food_entries:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
            sorted_entries = sorted(food_entries, key=lambda x: x.get("timestamp") if isinstance(x.get("timestamp"), datetime) else datetime.fromisoformat(str(x.get("timestamp"))))
            first_date = sorted_entries[0].get("timestamp")
            last_date = sorted_entries[-1].get("timestamp")
            
            if isinstance(first_date, str):
                first_date = datetime.fromisoformat(first_date)
            if isinstance(last_date, str):
                last_date = datetime.fromisoformat(last_date)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–Ω–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ
            current_date = first_date.date()
            end_date = last_date.date()
            
            while current_date <= end_date:
                date_str = current_date.strftime("%Y-%m-%d")
                day_data = days.get(date_str, {
                    "calories": 0,
                    "protein": 0,
                    "fat": 0,
                    "carb": 0,
                    "fiber": 0
                })
                daily_data.append({
                    "date": current_date.strftime("%d.%m.%Y"),
                    "calories": day_data["calories"],
                    "protein": day_data["protein"],
                    "fat": day_data["fat"],
                    "carb": day_data["carb"],
                    "fiber": day_data["fiber"]
                })
                current_date += timedelta(days=1)
        
        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞
        weight_entries = [entry for entry in history if entry.get("type") == "weight"]
        weight_entries.sort(key=lambda x: x.get("timestamp") if isinstance(x.get("timestamp"), datetime) else datetime.fromisoformat(x.get("timestamp")))
        weight_change = 0
        if len(weight_entries) >= 2:
            first_weight = float(weight_entries[0].get("weight", 0))
            last_weight = float(weight_entries[-1].get("weight", 0))
            weight_change = last_weight - first_weight
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products = {}
        for entry in food_entries:
            for line in entry.get("response", "").split("\n"):
                if line.strip().startswith("‚Ä¢") or line.strip().startswith("-"):
                    item_parts = line.strip()[1:].strip().split("‚Äì")
                    if len(item_parts) >= 1:
                        product_name = item_parts[0].strip()
                        products[product_name] = products.get(product_name, 0) + 1
        
        top_products = [{"name": name, "count": count} for name, count in sorted(products.items(), key=lambda x: x[1], reverse=True)[:5]]
        
        # –†–∞—Å—á–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –Ω–æ—Ä–º—ã
        target_kcal = user_data.get("target_kcal", 2000)
        adherence_percent = round((avg_calories / target_kcal * 100) if target_kcal > 0 else 0)
        if adherence_percent > 100:
            adherence_percent = 200 - adherence_percent  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%
        adherence_percent = max(0, min(100, adherence_percent))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 100
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        user_offset = user_data.get("utc_offset", 0)
        user_tz = timezone(timedelta(hours=user_offset))
        today = datetime.now(user_tz).date()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ API endpoint
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
            entries_today = [e for e in history if e["timestamp"].astimezone(user_tz).date() == today and e.get("type") in ["food", "text"]]
            
            if entries_today:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today_kcal = today_prot = today_fat = today_carb = today_fiber = 0.0
                today_meals = []
                
                for i, entry in enumerate(entries_today, start=1):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –ë–ñ–£
                    kcal, prot, fat, carb, fiber = parse_nutrition_cached(entry['response'])
                    
                    today_kcal += kcal
                    today_prot += prot
                    today_fat += fat
                    today_carb += carb
                    today_fiber += fiber
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                    short_desc = parse_products_cached(entry['response'])
                    
                    today_meals.append({
                        "time": entry['timestamp'].astimezone(user_tz).strftime("%H:%M"),
                        "description": short_desc,
                        "calories": kcal
                    })
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                target_kcal = int(user_data.get("target_kcal", 2000))
                target_protein = int(user_data.get("target_protein", 100))
                target_fat = int(user_data.get("target_fat", 67))
                target_carb = int(user_data.get("target_carb", 250))
                target_fiber = int(user_data.get("target_fiber", 25))
                
                today_summary_data = {
                    "date": today.strftime("%Y-%m-%d"),
                    "total_calories": int(today_kcal),
                    "total_protein": int(today_prot),
                    "total_fat": int(today_fat),
                    "total_carb": int(today_carb),
                    "total_fiber": round(today_fiber, 1),
                    "meals": today_meals,
                    "remaining_calories": max(0, target_kcal - today_kcal),
                    "remaining_protein": max(0, target_protein - today_prot),
                    "remaining_fat": max(0, target_fat - today_fat),
                    "remaining_carb": max(0, target_carb - today_carb),
                    "remaining_fiber": max(0, round(target_fiber - today_fiber, 1)),
                    "warnings": []
                }
            else:
                today_summary_data = {
                    "date": today.strftime("%Y-%m-%d"),
                    "total_calories": 0,
                    "total_protein": 0,
                    "total_fat": 0,
                    "total_carb": 0,
                    "total_fiber": 0,
                    "meals": [],
                    "remaining_calories": user_data.get("target_kcal", 2000),
                    "remaining_protein": user_data.get("target_protein", 100),
                    "remaining_fat": user_data.get("target_fat", 67),
                    "remaining_carb": user_data.get("target_carb", 250),
                    "remaining_fiber": user_data.get("target_fiber", 25),
                    "warnings": []
                }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è: {e}")
            today_summary_data = None
        
        stats_data = {
            "general": {
                "avg_calories": avg_calories,
                "days_tracked": days_tracked,
                "adherence_percent": adherence_percent,
                "weight_change": round(weight_change, 1)
            },
            "nutrition_distribution": {
                "protein": protein_percent,
                "fat": fat_percent,
                "carb": carb_percent
            },
            "top_products": top_products,
            "user_targets": {
                "calories": user_data.get("target_kcal", 2000),
                "protein": user_data.get("target_protein", 100),
                "fat": user_data.get("target_fat", 67),
                "carb": user_data.get("target_carb", 250),
                "fiber": user_data.get("target_fiber", 25)
            },
            "today_summary": today_summary_data,
            "daily_data": daily_data  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        }
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        result = {"status": "success", "data": stats_data}
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–∂–µ)
        api_cache.set(cache_key, result, ttl=600)
        return result
    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/recipes/{user_id}", response_model=Dict[str, Any])
async def get_recipes(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = api_cache.get_cache_key("recipes", user_id)
        cached_result = api_cache.get(cache_key)
        if cached_result:
            return cached_result
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data
        except ImportError:
            result = {"status": "success", "data": {"test": "mode"}}
            api_cache.set(cache_key, result, ttl=60)
            return result
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipes_data = {
            "categories": ["–í—Å–µ", "–ó–∞–≤—Ç—Ä–∞–∫–∏", "–û–±–µ–¥—ã", "–£–∂–∏–Ω—ã", "–°–∞–ª–∞—Ç—ã", "–î–µ—Å–µ—Ä—Ç—ã"],
            "recipes": []
        }
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recepti_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "recepti.txt")
        
        # –ß—Ç–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        try:
            with open(recepti_path, "r", encoding="utf-8") as f:
                content = f.read()
                
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
            recipe_blocks = re.split(r'\n\s*\n', content)
            for block in recipe_blocks:
                if not block.strip():
                    continue
                    
                lines = block.strip().split('\n')
                if len(lines) < 3:
                    continue
                    
                title = lines[0].strip()
                category = "–û–±–µ–¥—ã"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if any(word in title.lower() for word in ["–∑–∞–≤—Ç—Ä–∞–∫", "–∫–∞—à–∞", "–æ–º–ª–µ—Ç", "—è–∏—á–Ω–∏—Ü–∞"]):
                    category = "–ó–∞–≤—Ç—Ä–∞–∫–∏"
                elif any(word in title.lower() for word in ["—Å–∞–ª–∞—Ç", "–∑–∞–∫—É—Å–∫–∞"]):
                    category = "–°–∞–ª–∞—Ç—ã"
                elif any(word in title.lower() for word in ["–¥–µ—Å–µ—Ä—Ç", "—Ç–æ—Ä—Ç", "–ø–∏—Ä–æ–≥", "—Å–ª–∞–¥–∫–æ–µ"]):
                    category = "–î–µ—Å–µ—Ä—Ç—ã"
                elif any(word in title.lower() for word in ["—É–∂–∏–Ω", "–ª–µ–≥–∫–æ–µ"]):
                    category = "–£–∂–∏–Ω—ã"
                
                # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                prep_time = "30 –º–∏–Ω"
                if "–±—ã—Å—Ç—Ä" in ' '.join(lines).lower():
                    prep_time = "15 –º–∏–Ω"
                elif "–¥–æ–ª–≥" in ' '.join(lines).lower() or "—á–∞—Å" in ' '.join(lines).lower():
                    prep_time = "60 –º–∏–Ω"
                
                # –û—Ü–µ–Ω–∫–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
                calories = 350  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if any(word in ' '.join(lines).lower() for word in ["–¥–∏–µ—Ç", "–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä", "–ª–µ–≥–∫"]):
                    calories = 250
                elif any(word in ' '.join(lines).lower() for word in ["—Å—ã—Ç–Ω", "–∂–∏—Ä–Ω", "–∫–∞–ª–æ—Ä–∏–π–Ω"]):
                    calories = 450
                
                # –û–ø–∏—Å–∞–Ω–∏–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                description = ' '.join(lines[1:min(4, len(lines))])
                if len(description) > 150:
                    description = description[:147] + "..."
                
                recipes_data["recipes"].append({
                    "title": title,
                    "category": category,
                    "prep_time": prep_time,
                    "calories": calories,
                    "description": description,
                    "portions": 2,
                    "nutrition": {
                        "calories": calories,
                        "protein": round(calories * 0.25 / 4),  # 25% –±–µ–ª–∫–æ–≤, 4 –∫–∫–∞–ª/–≥
                        "fat": round(calories * 0.3 / 9),       # 30% –∂–∏—Ä–æ–≤, 9 –∫–∫–∞–ª/–≥
                        "carb": round(calories * 0.45 / 4),     # 45% —É–≥–ª–µ–≤–æ–¥–æ–≤, 4 –∫–∫–∞–ª/–≥
                        "fiber": 5
                    }
                })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        
        result = {"status": "success", "data": recipes_data}
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ 1 —á–∞—Å (–æ–Ω–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã)
        api_cache.set(cache_key, result, ttl=3600)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


class MealData(BaseModel):
    user_id: str
    meal_name: str
    meal_time: str
    items: List[Dict[str, Any]]

@app.post("/api/meal", response_model=Dict[str, Any])
async def add_meal(meal_data: MealData, api_key: str = Depends(verify_api_key)):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    """
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "status": "success",
            "message": "–ü—Ä–∏–µ–º –ø–∏—â–∏ –¥–æ–±–∞–≤–ª–µ–Ω",
            "data": meal_data.dict()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/api/profile/{user_id}", response_model=Dict[str, Any])
async def get_user_profile(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = api_cache.get_cache_key("profile", user_id)
        cached_result = api_cache.get(cache_key)
        if cached_result:
            return cached_result
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data
        except ImportError:
            result = {"status": "success", "data": {"test": "mode"}}
            api_cache.set(cache_key, result, ttl=60)
            return result
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        
        result = {"status": "success", "data": user_data}
        # –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ 30 –º–∏–Ω—É—Ç (–º–µ–Ω—è–µ—Ç—Å—è —Ä–µ–¥–∫–æ)
        api_cache.set(cache_key, result, ttl=1800)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.put("/api/profile/{user_id}", response_model=Dict[str, Any])
async def update_user_profile(user_id: str, profile_data: ProfileUpdateData, api_key: str = Depends(verify_api_key)):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫—ç—à–∞
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data, update_user_data
        except ImportError:
            return {"status": "success", "message": "Test mode"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_data = await get_user_data(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        update_dict = profile_data.dict(exclude_unset=True)
        current_data.update(update_dict)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å, —Ü–µ–ª—å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å
        recalculate_fields = {"gender", "age", "height", "weight", "goal", "activity", "pregnant"}
        should_recalculate = bool(recalculate_fields.intersection(update_dict.keys()))
        
        if should_recalculate:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            gender = current_data.get("gender")
            age = current_data.get("age")
            height = current_data.get("height")
            weight = current_data.get("weight")
            goal = current_data.get("goal")
            activity = current_data.get("activity")
            pregnant = current_data.get("pregnant", False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if all([gender, age, height, weight, goal, activity]):
                # –†–∞—Å—á–µ—Ç BMR (Mifflin-St Jeor)
                if gender == "–º—É–∂":
                    bmr = 10 * weight + 6.25 * height - 5 * age + 5
                else:
                    bmr = 10 * weight + 6.25 * height - 5 * age - 161
                
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                multipliers = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.3, "–≤—ã—Å–æ–∫–∏–π": 1.4}
                maintenance = bmr * multipliers.get(activity, 1.2)
                
                # –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
                if pregnant:
                    if goal == weight:
                        target_calories = maintenance * 1.17
                    elif goal < weight:
                        target_calories = maintenance
                    else:
                        target_calories = maintenance * 1.34
                else:
                    if goal == weight:
                        target_calories = maintenance
                    elif goal < weight:
                        target_calories = maintenance * 0.83
                    else:
                        target_calories = maintenance * 1.17
                
                target_calories = max(1200, target_calories)
                
                # –†–∞—Å—á–µ—Ç –ë–ñ–£
                protein_grams = int((target_calories * 0.3) / 4)
                fat_grams = int((target_calories * 0.3) / 9)
                carbs_grams = int((target_calories * 0.4) / 4)
                fiber_grams = max(20, round(target_calories * 0.014))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                current_data["target_kcal"] = int(target_calories)
                current_data["target_protein"] = protein_grams
                current_data["target_fat"] = fat_grams
                current_data["target_carb"] = carbs_grams
                current_data["target_fiber"] = fiber_grams
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await update_user_data(user_id, current_data)
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        api_cache.invalidate_user_cache(user_id)
        
        response_data = {
            "status": "success", 
            "message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω" + (" –∏ —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã" if should_recalculate else ""), 
            "data": current_data,
            "recalculated": should_recalculate
        }
        
        if should_recalculate:
            response_data["targets"] = {
                "target_kcal": current_data.get("target_kcal"),
                "target_protein": current_data.get("target_protein"),
                "target_fat": current_data.get("target_fat"),
                "target_carb": current_data.get("target_carb"),
                "target_fiber": current_data.get("target_fiber")
            }
        
        return response_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@app.post("/api/profile/{user_id}/recalculate", response_model=Dict[str, Any])
async def recalculate_user_targets(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data, update_user_data
        except ImportError:
            return {"status": "success", "message": "Test mode"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await get_user_data(user_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        gender = data.get("gender")
        age = data.get("age")
        height = data.get("height")
        weight = data.get("weight")
        goal = data.get("goal")
        activity = data.get("activity")
        pregnant = data.get("pregnant", False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([gender, age, height, weight, goal, activity]):
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
        
        # –†–∞—Å—á–µ—Ç BMR (Mifflin-St Jeor)
        if gender == "–º—É–∂":
            bmr = 10 * weight + 6.25 * height - 5 * age + 5
        else:
            bmr = 10 * weight + 6.25 * height - 5 * age - 161
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        multipliers = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.3, "–≤—ã—Å–æ–∫–∏–π": 1.4}
        maintenance = bmr * multipliers.get(activity, 1.2)
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
        if pregnant:
            if goal == weight:
                target_calories = maintenance * 1.17
            elif goal < weight:
                target_calories = maintenance
            else:
                target_calories = maintenance * 1.34
        else:
            if goal == weight:
                target_calories = maintenance
            elif goal < weight:
                target_calories = maintenance * 0.83
            else:
                target_calories = maintenance * 1.17
        
        target_calories = max(1200, target_calories)
        
        # –†–∞—Å—á–µ—Ç –ë–ñ–£
        protein_grams = int((target_calories * 0.3) / 4)
        fat_grams = int((target_calories * 0.3) / 9)
        carbs_grams = int((target_calories * 0.4) / 4)
        fiber_grams = max(20, round(target_calories * 0.014))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data["target_kcal"] = int(target_calories)
        data["target_protein"] = protein_grams
        data["target_fat"] = fat_grams
        data["target_carb"] = carbs_grams
        data["target_fiber"] = fiber_grams
        
        await update_user_data(user_id, data)
        
        return {
            "status": "success", 
            "message": "–¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã",
            "data": {
                "target_kcal": int(target_calories),
                "target_protein": protein_grams,
                "target_fat": fat_grams,
                "target_carb": carbs_grams,
                "target_fiber": fiber_grams
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –ù–û–í–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–∞–º
@app.get("/api/diary-data/{user_id}")
async def get_diary_data(user_id: str, date_str: Optional[str] = None, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = api_cache.get_cache_key("diary_data", user_id, date=date_str or "today")
        cached_result = api_cache.get(cache_key)
        if cached_result:
            return cached_result
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_user_data, get_history
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ get_diary_data: {import_error}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ bot.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            target_date = date_str or datetime.now().strftime("%Y-%m-%d")
            result = {
                "status": "success", 
                "data": {
                    "date": target_date,
                    "total_calories": 1650,
                    "total_protein": 85,
                    "total_fat": 55,
                    "total_carb": 190,
                    "total_fiber": 18.5,
                    "meals": [
                        {
                            "id": 1,
                            "time": "08:30",
                            "description": "–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –æ—Ä–µ—Ö–∞–º–∏",
                            "calories": 420,
                            "protein": 15,
                            "fat": 12,
                            "carb": 65,
                            "fiber": 8.2,
                            "items": [
                                {"name": "–û–≤—Å—è–Ω–∫–∞", "weight": "50–≥", "calories": 180},
                                {"name": "–ë–∞–Ω–∞–Ω", "weight": "120–≥", "calories": 108},
                                {"name": "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏", "weight": "20–≥", "calories": 132}
                            ]
                        },
                        {
                            "id": 2,
                            "time": "13:15",
                            "description": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏",
                            "calories": 580,
                            "protein": 45,
                            "fat": 8,
                            "carb": 75,
                            "fiber": 6.5,
                            "items": [
                                {"name": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", "weight": "150–≥", "calories": 248},
                                {"name": "–†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π", "weight": "100–≥", "calories": 130},
                                {"name": "–ë—Ä–æ–∫–∫–æ–ª–∏", "weight": "150–≥", "calories": 51},
                                {"name": "–ú–æ—Ä–∫–æ–≤—å", "weight": "100–≥", "calories": 41}
                            ]
                        },
                        {
                            "id": 3,
                            "time": "19:45",
                            "description": "–¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏",
                            "calories": 280,
                            "protein": 25,
                            "fat": 9,
                            "carb": 20,
                            "fiber": 3.8,
                            "items": [
                                {"name": "–¢–≤–æ—Ä–æ–≥ 5%", "weight": "150–≥", "calories": 180},
                                {"name": "–ß–µ—Ä–Ω–∏–∫–∞", "weight": "80–≥", "calories": 46},
                                {"name": "–ú–µ–¥", "weight": "15–≥", "calories": 54}
                            ]
                        }
                    ],
                    "targets": {
                        "calories": 2000,
                        "protein": 100,
                        "fat": 67,
                        "carb": 250,
                        "fiber": 25
                    },
                    "remaining": {
                        "calories": 350,
                        "protein": 15,
                        "fat": 12,
                        "carb": 60,
                        "fiber": 6.5
                    },
                    "message": "üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
                }
            }
            # –ö—ç—à–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            api_cache.set(cache_key, result, ttl=60)
            return result
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        user_offset = user_data.get("utc_offset", 0)
        user_tz = timezone(timedelta(hours=user_offset))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if date_str:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        else:
            target_date = datetime.now(user_tz).date()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = await get_history(user_id)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        food_entries_with_images = [e for e in history if e.get('type') == 'food' and e.get('compressed_image')]
        food_entries_without_images = [e for e in history if e.get('type') == 'food' and not e.get('compressed_image')]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ)
        entries_today = [e for e in history if e["timestamp"].astimezone(user_tz).date() == target_date and e.get("type") in ["food", "text"]]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        for i, entry in enumerate(entries_today):
            has_image = bool(entry.get('compressed_image'))
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if has_image:
                image_length = len(entry.get('compressed_image', ''))
                # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        target_kcal = int(user_data.get("target_kcal", 2000))
        target_protein = int(user_data.get("target_protein", 100))
        target_fat = int(user_data.get("target_fat", 67))
        target_carb = int(user_data.get("target_carb", 250))
        target_fiber = int(user_data.get("target_fiber", 25))
        
        if not entries_today:
            return {
                "status": "success", 
                "data": {
                    "date": target_date.strftime("%Y-%m-%d"),
                    "total_calories": 0,
                    "total_protein": 0,
                    "total_fat": 0,
                    "total_carb": 0,
                    "total_fiber": 0,
                    "meals": [],
                    "targets": {
                        "calories": target_kcal,
                        "protein": target_protein,
                        "fat": target_fat,
                        "carb": target_carb,
                        "fiber": target_fiber
                    },
                    "remaining": {
                        "calories": target_kcal,
                        "protein": target_protein,
                        "fat": target_fat,
                        "carb": target_carb,
                        "fiber": target_fiber
                    },
                    "message": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞."
                }
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        total_kcal = total_prot = total_fat = total_carb = total_fiber = 0.0
        meals = []
        
        for i, entry in enumerate(entries_today, start=1):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –ë–ñ–£
            kcal, prot, fat, carb, fiber = parse_nutrition_cached(entry['response'])
            
            total_kcal += kcal
            total_prot += prot
            total_fat += fat
            total_carb += carb
            total_fiber += fiber
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            lines = entry['response'].splitlines()
            food_lines = [line for line in lines if line.strip().startswith(("‚Ä¢", "-"))]
            
            # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            items = []
            for line in food_lines:
                clean_line = re.sub(r'^[‚Ä¢\-]\s*', '', line).strip()
                if "‚Äì" in clean_line:
                    parts = clean_line.split("‚Äì")
                    product_info = parts[0].strip()
                    nutrition_info = parts[1].strip() if len(parts) > 1 else ""
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞
                    weight_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–≥', product_info)
                    weight = weight_match.group(0) if weight_match else "100–≥"
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                    cal_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–∫–∫–∞–ª', nutrition_info)
                    product_calories = int(float(cal_match.group(1).replace(",", "."))) if cal_match else 0
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—É–±–∏—Ä–∞–µ–º –≤–µ—Å)
                    product_name = re.sub(r'\s*\d+(?:[.,]\d+)?\s*–≥.*', '', product_info).strip()
                    
                    items.append({
                        "name": product_name,
                        "weight": weight,
                        "calories": product_calories
                    })
            
            short_desc = ", ".join([re.sub(r'^[‚Ä¢\-]\s*', '', line).split("‚Äì")[0].strip() for line in food_lines]) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            
            meals.append({
                "id": i,
                "time": entry['timestamp'].astimezone(user_tz).strftime("%H:%M"),
                "description": short_desc,
                "calories": kcal,
                "protein": prot,
                "fat": fat,
                "carb": carb,
                "fiber": fiber,
                "items": items,
                "full_response": entry['response'],
                "timestamp": entry['timestamp'].isoformat(),
                "image": entry.get('compressed_image')  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            })
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        remaining_kcal = max(0, target_kcal - total_kcal)
        remaining_prot = max(0, target_protein - total_prot)
        remaining_fat = max(0, target_fat - total_fat)
        remaining_carb = max(0, target_carb - total_carb)
        remaining_fiber = max(0, target_fiber - total_fiber)
        
        diary_data = {
            "date": target_date.strftime("%Y-%m-%d"),
            "total_calories": int(total_kcal),
            "total_protein": int(total_prot),
            "total_fat": int(total_fat),
            "total_carb": int(total_carb),
            "total_fiber": round(total_fiber, 1),
            "meals": meals,
            "targets": {
                "calories": target_kcal,
                "protein": target_protein,
                "fat": target_fat,
                "carb": target_carb,
                "fiber": target_fiber
            },
            "remaining": {
                "calories": remaining_kcal,
                "protein": remaining_prot,
                "fat": remaining_fat,
                "carb": remaining_carb,
                "fiber": round(remaining_fiber, 1)
            }
        }
        
        result = {"status": "success", "data": diary_data}
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
        api_cache.set(cache_key, result, ttl=180)
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_diary_data: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
@app.get("/api/cache/stats")
async def get_cache_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
    return {
        "status": "success",
        "data": {
            "cache_size": len(api_cache.cache),
            "cache_keys": list(api_cache.cache.keys())[:10],  # –ü–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
            "ttl_info": {k: v - time.time() for k, v in list(api_cache.cache_ttl.items())[:5]}
        }
    }

@app.delete("/api/cache/clear/{user_id}")
async def clear_user_cache(user_id: str):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    api_cache.invalidate_user_cache(user_id)
    return {"status": "success", "message": f"–ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω"}


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞
@app.delete("/api/meal/{user_id}/{timestamp}")
async def delete_meal(user_id: str, timestamp: str, api_key: str = Depends(verify_api_key)):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –ø–æ timestamp
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_history, async_session, UserHistory
            from sqlalchemy import delete
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ delete_meal: {import_error}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = await get_history(user_id)
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        entry_to_remove = None
        for entry in history:
            if entry["timestamp"].isoformat() == timestamp:
                entry_to_remove = entry
                break
        
        if not entry_to_remove:
            raise HTTPException(status_code=404, detail="–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            dt = entry_to_remove["timestamp"]
            async with async_session() as session:
                async with session.begin():
                    await session.execute(delete(UserHistory).where(
                        UserHistory.user_id == user_id, 
                        UserHistory.timestamp == dt
                    ))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api_cache.invalidate_user_cache(user_id)
        
        return {
            "status": "success", 
            "message": "–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
            "deleted_entry": {
                "timestamp": timestamp,
                "description": parse_products_cached(entry_to_remove.get('response', ''))
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_meal: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å –ª–æ–≥–∏–∫–æ–π –±–æ—Ç–∞)
class WeightEntry(BaseModel):
    weight: float
    date: Optional[str] = None  # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    note: Optional[str] = None
    recalculate_targets: bool = True  # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£ –∫–∞–∫ –≤ –±–æ—Ç–µ

# –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞
class WeightHistory(BaseModel):
    entries: List[Dict[str, Any]]
    current_weight: Optional[float] = None
    goal_weight: Optional[float] = None
    weight_change: Optional[float] = None  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏



# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Å–æ–º

@app.post("/api/weight/{user_id}", response_model=Dict[str, Any])
async def add_weight_entry(user_id: str, weight_data: WeightEntry, api_key: str = Depends(verify_api_key)):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data, update_user_data, add_history_entry
        except ImportError:
            return {"status": "success", "message": "Test mode"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_data = await get_user_data(user_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        entry_date = weight_data.date or datetime.now().strftime("%Y-%m-%d")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        old_weight = current_data.get("weight")
        current_data["weight"] = weight_data.weight
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_entry = {
            "prompt": f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞: {weight_data.weight} –∫–≥",
            "response": f"–í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω —Å {old_weight} –∫–≥ –Ω–∞ {weight_data.weight} –∫–≥" + (f". –ó–∞–º–µ—Ç–∫–∞: {weight_data.note}" if weight_data.note else ""),
            "timestamp": datetime.now(),
            "type": "weight",
            "data": {
                "weight": weight_data.weight,
                "date": entry_date,
                "note": weight_data.note,
                "previous_weight": old_weight
            }
        }
        
        await add_history_entry(user_id, history_entry)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –≤–µ—Å–æ–º
        gender = current_data.get("gender")
        age = current_data.get("age")
        height = current_data.get("height")
        goal = current_data.get("goal")
        activity = current_data.get("activity")
        pregnant = current_data.get("pregnant", False)
        
        if all([gender, age, height, goal, activity]):
            # –†–∞—Å—á–µ—Ç BMR (Mifflin-St Jeor)
            if gender == "–º—É–∂":
                bmr = 10 * weight_data.weight + 6.25 * height - 5 * age + 5
            else:
                bmr = 10 * weight_data.weight + 6.25 * height - 5 * age - 161
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            multipliers = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.3, "–≤—ã—Å–æ–∫–∏–π": 1.4}
            maintenance = bmr * multipliers.get(activity, 1.2)
            
            # –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
            if pregnant:
                if goal == weight_data.weight:
                    target_calories = maintenance * 1.17
                elif goal < weight_data.weight:
                    target_calories = maintenance
                else:
                    target_calories = maintenance * 1.34
            else:
                if goal == weight_data.weight:
                    target_calories = maintenance
                elif goal < weight_data.weight:
                    target_calories = maintenance * 0.83
                else:
                    target_calories = maintenance * 1.17
            
            target_calories = max(1200, target_calories)
            
            # –†–∞—Å—á–µ—Ç –ë–ñ–£
            protein_grams = int((target_calories * 0.3) / 4)
            fat_grams = int((target_calories * 0.3) / 9)
            carbs_grams = int((target_calories * 0.4) / 4)
            fiber_grams = max(20, round(target_calories * 0.014))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_data["target_kcal"] = int(target_calories)
            current_data["target_protein"] = protein_grams
            current_data["target_fat"] = fat_grams
            current_data["target_carb"] = carbs_grams
            current_data["target_fiber"] = fiber_grams
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if old_weight and abs(old_weight - weight_data.weight) < 0.01:
            return {
                "status": "success", 
                "message": "–í–µ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è",
                "data": {
                    "new_weight": weight_data.weight,
                    "previous_weight": old_weight,
                    "weight_change": 0,
                    "date": entry_date,
                    "targets_recalculated": False
                }
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
        if weight_data.recalculate_targets:
            history_entry = {
                "prompt": f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: {weight_data.weight} –∫–≥",
                "response": f"–í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω —Å {old_weight or '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥ –Ω–∞ {weight_data.weight} –∫–≥. –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã.",
                "type": "weight_update",
                "timestamp": datetime.now(),
                "compressed_image": None
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ bot.py)
            try:
                from bot import add_history_entry
                await add_history_entry(user_id, history_entry)
            except ImportError:
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                print(f"–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞: {history_entry}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await update_user_data(user_id, current_data)
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api_cache.invalidate_user_cache(user_id)
        
        weight_change = None
        if old_weight:
            weight_change = round(weight_data.weight - old_weight, 1)
        
        return {
            "status": "success",
            "message": "–í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã",
            "data": {
                "new_weight": weight_data.weight,
                "previous_weight": old_weight,
                "weight_change": weight_change,
                "date": entry_date,
                "targets_recalculated": True
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/weight/{user_id}", response_model=Dict[str, Any])
async def get_weight_history(user_id: str, period: str = "month", api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    period: week, month, 6months, year
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data, get_history
        except ImportError:
            return {"status": "success", "message": "Test mode", "data": {"entries": [], "current_weight": 70.0}}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        current_weight = user_data.get("weight")
        goal_weight = user_data.get("goal")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = await get_history(user_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–π —Ç–∏–ø weight_update)
        weight_entries = [entry for entry in history if entry.get("type") in ["weight", "weight_update"]]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        now = datetime.now()
        if period == "week":
            start_date = now - timedelta(days=7)
        elif period == "month":
            start_date = now - timedelta(days=30)
        elif period == "6months":
            start_date = now - timedelta(days=180)
        elif period == "year":
            start_date = now - timedelta(days=365)
        else:
            start_date = now - timedelta(days=30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        filtered_entries = []
        for entry in weight_entries:
            entry_date = entry.get("timestamp")
            if isinstance(entry_date, str):
                entry_date = datetime.fromisoformat(entry_date.replace('Z', '+00:00'))
            
            if entry_date >= start_date:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                weight = None
                note = ""
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤–µ—Å –∏–∑ prompt (–¥–ª—è –∑–∞–ø–∏—Å–µ–π —Ç–∏–ø–∞ weight_update)
                if entry.get("type") == "weight_update":
                    prompt = entry.get("prompt", "")
                    import re
                    weight_match = re.search(r'(\d+(?:\.\d+)?)\s*–∫–≥', prompt)
                    if weight_match:
                        weight = float(weight_match.group(1))
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ prompt, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ data
                if weight is None:
                    weight_data = entry.get("data", {})
                    weight = weight_data.get("weight")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–µ—Å–∞
                if weight is None or weight <= 0:
                    continue
                
                filtered_entries.append({
                    "date": entry_date.strftime("%Y-%m-%d"),
                    "weight": weight,
                    "note": note,
                    "timestamp": entry_date.isoformat()
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        filtered_entries.sort(key=lambda x: x["timestamp"], reverse=True)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞
        weight_change = None
        if len(filtered_entries) >= 2:
            latest_weight = filtered_entries[0]["weight"]
            previous_weight = filtered_entries[1]["weight"]
            if latest_weight and previous_weight:
                weight_change = round(latest_weight - previous_weight, 1)
        
        return {
            "status": "success",
            "data": {
                "entries": filtered_entries,
                "current_weight": current_weight,
                "goal_weight": goal_weight,
                "weight_change": weight_change,
                "period": period,
                "total_entries": len(filtered_entries)
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/api/weight/{user_id}")
async def delete_weight_entry(user_id: str, timestamp: str = Query(...), api_key: str = Depends(verify_api_key)):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ –ø–æ timestamp —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤–µ—Å–∞ –≤ –±–æ—Ç–µ
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data, update_user_data, async_session, UserHistory
            from sqlalchemy import select, delete as sql_delete
        except ImportError:
            return {"status": "success", "message": "Test mode"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_data = await get_user_data(user_id)
        if not current_data:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(UserHistory).where(
                    UserHistory.user_id == user_id,
                    UserHistory.type.in_(["weight", "weight_update"])
                ).order_by(UserHistory.timestamp.desc())
            )
            weight_entries = result.scalars().all()
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            entry_to_delete = None
            for entry in weight_entries:
                if entry.timestamp.isoformat() == timestamp:
                    entry_to_delete = entry
                    break
            
            if not entry_to_delete:
                raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å–∞, –∏—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å –≤–µ—Å–æ–º
            original_entry_to_delete = entry_to_delete  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
            weight_entry_to_delete = None
            
            if entry_to_delete.data is None or not entry_to_delete.data.get("weight"):
                
                # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å –≤–µ—Å–æ–º, —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 —Å–µ–∫—É–Ω–¥—ã)
                target_time = entry_to_delete.timestamp
                for entry in weight_entries:
                    if (entry.data and entry.data.get("weight") and 
                        abs((entry.timestamp - target_time).total_seconds()) < 1):
                        weight_entry_to_delete = entry
                        entry_to_delete = entry  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ª–æ–≥–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Å–∞–º–æ–π –Ω–æ–≤–æ–π) —Å—Ä–µ–¥–∏ –∑–∞–ø–∏—Å–µ–π —Å –≤–µ—Å–æ–º
            latest_weight_entry = None
            for entry in weight_entries:
                if entry.data and entry.data.get("weight"):
                    latest_weight_entry = entry
                    break
            
            is_latest_entry = (latest_weight_entry and 
                             latest_weight_entry.id == entry_to_delete.id) if latest_weight_entry else False
            
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, entry in enumerate(weight_entries):
                weight_from_data = None
                if entry.data and isinstance(entry.data, dict):
                    weight_from_data = entry.data.get("weight")
            
            restored_weight = None
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏
            if is_latest_entry and len(weight_entries) > 1:
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å —É–¥–∞–ª—è–µ–º–æ–π –∑–∞–ø–∏—Å–∏
                deleted_weight = None
                if entry_to_delete.data and isinstance(entry_to_delete.data, dict):
                    deleted_weight = entry_to_delete.data.get("weight")
                
                
                # –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å —Å –î–†–£–ì–ò–ú –≤–µ—Å–æ–º
                previous_entry = None
                for entry in weight_entries[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é (—É–¥–∞–ª—è–µ–º—É—é) –∑–∞–ø–∏—Å—å
                    entry_weight = None
                    if entry.data and isinstance(entry.data, dict):
                        entry_weight = entry.data.get("weight")
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–ø–∏—Å—å —Å –¥—Ä—É–≥–∏–º –≤–µ—Å–æ–º - —ç—Ç–æ –Ω–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å
                    if entry_weight is not None and entry_weight != deleted_weight:
                        previous_entry = entry
                        break
                
                if previous_entry:
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏
                    import re
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ data
                    if previous_entry.data:
                        try:
                            data_dict = previous_entry.data if isinstance(previous_entry.data, dict) else {}
                            restored_weight = data_dict.get("weight")
                        except Exception as e:
                            pass
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ data, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ prompt
                    if restored_weight is None:
                        weight_match = re.search(r'(\d+(?:\.\d+)?)', previous_entry.prompt or "")
                        if weight_match:
                            restored_weight = float(weight_match.group(1))
                    
                    if restored_weight:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        current_data["weight"] = restored_weight
                        await update_user_data(user_id, current_data)
                else:
                    pass
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                entries_to_delete = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –≤–µ—Å–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                if weight_entry_to_delete:
                    entries_to_delete.append(weight_entry_to_delete.id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                if original_entry_to_delete and original_entry_to_delete.id != (weight_entry_to_delete.id if weight_entry_to_delete else None):
                    entries_to_delete.append(original_entry_to_delete.id)
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                for entry_id in entries_to_delete:
                    await session.execute(
                        sql_delete(UserHistory).where(UserHistory.id == entry_id)
                    )
                
                await session.commit()
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º
                await session.execute(
                    sql_delete(UserHistory).where(UserHistory.id == entry_to_delete.id)
                )
                await session.commit()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api_cache.invalidate_user_cache(user_id)
        
        return {
            "status": "success",
            "message": "–ó–∞–ø–∏—Å—å –≤–µ—Å–∞ —É–¥–∞–ª–µ–Ω–∞",
            "data": {
                "is_latest_entry": is_latest_entry,
                "restored_weight": restored_weight
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))



@app.post("/api/diary/{user_id}/share")
async def create_diary_share(
    user_id: str,
    period: str = Query("week", description="–ü–µ—Ä–∏–æ–¥: week, month, custom"),
    start_date: Optional[str] = Query(None, description="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è custom –ø–µ—Ä–∏–æ–¥–∞"),
    end_date: Optional[str] = Query(None, description="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è custom –ø–µ—Ä–∏–æ–¥–∞")
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
        import secrets
        import hashlib
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        token_data = f"{user_id}_{period}_{start_date}_{end_date}_{secrets.token_hex(16)}"
        share_token = hashlib.sha256(token_data.encode()).hexdigest()[:32]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if period == "week":
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=7)
        elif period == "month":
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=30)
        # –î–ª—è custom –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from bot import async_session
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        async with async_session() as session:
            await session.execute(text("""
                CREATE TABLE IF NOT EXISTS diary_shares (
                    share_token TEXT PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    period TEXT NOT NULL,
                    start_date TEXT NOT NULL,
                    end_date TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    expires_at TEXT NOT NULL
                )
            """))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ
            await session.execute(text("""
                INSERT INTO diary_shares 
                (share_token, user_id, period, start_date, end_date, created_at, expires_at)
                VALUES (:share_token, :user_id, :period, :start_date, :end_date, :created_at, :expires_at)
                ON CONFLICT (share_token) DO UPDATE SET
                    user_id = EXCLUDED.user_id,
                    period = EXCLUDED.period,
                    start_date = EXCLUDED.start_date,
                    end_date = EXCLUDED.end_date,
                    created_at = EXCLUDED.created_at,
                    expires_at = EXCLUDED.expires_at
            """), {
                "share_token": share_token,
                "user_id": user_id,
                "period": period,
                "start_date": start_date.isoformat() if isinstance(start_date, date) else start_date,
                "end_date": end_date.isoformat() if isinstance(end_date, date) else end_date,
                "created_at": datetime.now().isoformat(),
                "expires_at": (datetime.now() + timedelta(days=30)).isoformat()  # –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π
            })
            await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
        base_url = "https://viaphoto.netlify.app"
        share_url = f"{base_url}/shared-diary/{share_token}"
        
        return {
            "success": True,
            "share_url": share_url,
            "share_token": share_token,
            "expires_at": (datetime.now() + timedelta(days=30)).isoformat(),
            "message": "–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")


@app.get("/shared-diary/{share_token}")
async def get_shared_diary(share_token: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É"""
    print(f"üîç –ó–∞–ø—Ä–æ—Å –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {share_token}")
    
    try:
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from bot import async_session
        
        async with async_session() as session:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            print(f"üîé –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {share_token}")
            result = await session.execute(text("""
                SELECT user_id, period, start_date, end_date, expires_at
                FROM diary_shares 
                WHERE share_token = :share_token AND expires_at > :current_time
            """), {
                "share_token": share_token,
                "current_time": datetime.now().isoformat()
            })
            
            share_info = result.fetchone()
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞: {share_info}")
            
            if not share_info:
                print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
                raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞")
            
            user_id, period, start_date, end_date, expires_at = share_info
            print(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –ø–µ—Ä–∏–æ–¥: {period}, –¥–∞—Ç—ã: {start_date} - {end_date}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã date
            print("üìÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç...")
            if isinstance(start_date, str):
                start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
                print(f"üìÖ start_date –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω: {start_date}")
            if isinstance(end_date, str):
                end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
                print(f"üìÖ end_date –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω: {end_date}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            print(f"üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
            result = await session.execute(text("""
                SELECT timestamp, prompt, response, data, compressed_image
                FROM user_history 
                WHERE user_id = :user_id AND type IN ('food', 'text')
                AND DATE(timestamp) BETWEEN :start_date AND :end_date
                ORDER BY timestamp DESC
            """), {
                "user_id": user_id,
                "start_date": start_date,
                "end_date": end_date
            })
            
            meal_entries = result.fetchall()
            print(f"üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(meal_entries)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            print(f"üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
            result = await session.execute(text("""
                SELECT data FROM user_data 
                WHERE user_id = :user_id
            """), {"user_id": user_id})
            
            profile_row = result.fetchone()
            profile_data = profile_row[0] if profile_row else {}
            print(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {bool(profile_data)}")
            
        print("üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        diary_data = {
            "user_info": {
                "name": profile_data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                "age": profile_data.get("age"),
                "height": profile_data.get("height"),
                "weight": profile_data.get("weight"),
                "goal": profile_data.get("goal")
            },
            "period": {
                "start_date": start_date,
                "end_date": end_date,
                "period_type": period
            },
            "meal_entries": [
                {
                    "timestamp": row[0].isoformat() if row[0] else None,
                    "prompt": row[1],
                    "response": row[2],
                    "data": row[3] if row[3] else {},
                    "image": row[4]
                }
                for row in meal_entries
            ],
            "expires_at": expires_at
        }
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return {"status": "success", "data": diary_data}
        
    except HTTPException as he:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {he.detail}")
        raise
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ {share_token}: {e}")
        print(f"üí• –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        print(f"üí• –¢—Ä–µ–π—Å: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: {str(e)}")



@app.get("/weight/{share_token}")
async def get_shared_weight(share_token: str, period: str = "month"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É"""
    print(f"‚öñÔ∏è –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {share_token}, –ø–µ—Ä–∏–æ–¥: {period}")
    
    try:
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from bot import async_session, get_user_data, get_history
        
        async with async_session() as session:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            print(f"üîé –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {share_token}")
            result = await session.execute(text("""
                SELECT user_id, period, start_date, end_date, expires_at
                FROM diary_shares 
                WHERE share_token = :share_token AND expires_at > :current_time
            """), {
                "share_token": share_token,
                "current_time": datetime.now(timezone.utc).isoformat()
            })
            
            share_data = result.fetchone()
            if not share_data:
                print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫: {share_token}")
                raise HTTPException(status_code=404, detail="–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞")
            
            user_id = share_data[0]
            print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            user_data = await get_user_data(user_id)
            current_weight = user_data.get("weight")
            goal_weight = user_data.get("goal")
            
            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤–µ—Å={current_weight}, —Ü–µ–ª—å={goal_weight}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            print(f"üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            history = await get_history(user_id)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–π —Ç–∏–ø weight_update)
            weight_entries = [entry for entry in history if entry.get("type") in ["weight", "weight_update"]]
            print(f"‚öñÔ∏è –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –≤–µ—Å–µ: {len(weight_entries)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            now = datetime.now()
            if period == "week":
                start_date = now - timedelta(days=7)
            elif period == "month":
                start_date = now - timedelta(days=30)
            elif period == "6months":
                start_date = now - timedelta(days=180)
            elif period == "year":
                start_date = now - timedelta(days=365)
            else:
                start_date = now - timedelta(days=30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü
            
            print(f"üìÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É: —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {now.strftime('%Y-%m-%d')}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            filtered_entries = []
            for entry in weight_entries:
                entry_date = entry.get("timestamp")
                if isinstance(entry_date, str):
                    entry_date = datetime.fromisoformat(entry_date.replace('Z', '+00:00'))
                
                if entry_date >= start_date:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                    weight = None
                    note = ""
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤–µ—Å –∏–∑ prompt (–¥–ª—è –∑–∞–ø–∏—Å–µ–π —Ç–∏–ø–∞ weight_update)
                    if entry.get("type") == "weight_update":
                        prompt = entry.get("prompt", "")
                        import re
                        weight_match = re.search(r'(\d+(?:\.\d+)?)\s*–∫–≥', prompt)
                        if weight_match:
                            weight = float(weight_match.group(1))
                            note = "–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ"
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ prompt, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ data
                    if weight is None:
                        weight_data = entry.get("data", {})
                        weight = weight_data.get("weight")
                        if weight:
                            note = "–ó–∞–ø–∏—Å—å –æ –≤–µ—Å–µ"
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–µ—Å–∞
                    if weight is None or weight <= 0:
                        continue
                    
                    filtered_entries.append({
                        "date": entry_date.strftime("%Y-%m-%d"),
                        "weight": weight,
                        "note": note,
                        "timestamp": entry_date.isoformat()
                    })
            
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_entries)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            filtered_entries.sort(key=lambda x: x["timestamp"], reverse=True)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞
            weight_change = None
            if len(filtered_entries) >= 2:
                latest_weight = filtered_entries[0]["weight"]
                previous_weight = filtered_entries[1]["weight"]
                if latest_weight and previous_weight:
                    weight_change = round(latest_weight - previous_weight, 1)
            
            print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: {weight_change}")
            
            response_data = {
                "status": "success",
                "data": {
                    "entries": filtered_entries,
                    "current_weight": current_weight,
                    "goal_weight": goal_weight,
                    "weight_change": weight_change,
                    "period": period,
                    "total_entries": len(filtered_entries)
                }
            }
            
            print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ: {len(filtered_entries)} –∑–∞–ø–∏—Å–µ–π")
            return response_data
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ: {str(e)}")



# –ú–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
class FavoriteRequest(BaseModel):
    meal_id: int

class FavoriteItem(BaseModel):
    meal_id: int
    description: str
    time: str
    calories: int
    protein: int
    fat: int
    carb: int
    fiber: float
    image: Optional[str] = None
    products: Optional[List[Dict[str, Any]]] = None
    added_date: str

# Endpoints –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@app.post("/favorites/{user_id}")
async def add_favorite(user_id: str, request: FavoriteRequest):
    """–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        print(f"üåü –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –±–ª—é–¥–æ {request.meal_id}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from bot import async_session, UserHistory
        from sqlalchemy import select, cast, JSON, String
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–ª—é–¥–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª—é–¥–∞
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_history
            
            print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
            history = await get_history(user_id)
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            meal_entries = [entry for entry in history if entry.get("type") == "food"]
            print(f"üçΩÔ∏è –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Ç–∏–ø–∞ 'food': {len(meal_entries)}")
            
            # –ò—â–µ–º –±–ª—é–¥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É (meal_id —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ –±–ª—é–¥)
            print(f"üîé –ò—â–µ–º –±–ª—é–¥–æ —Å –∏–Ω–¥–µ–∫—Å–æ–º: {request.meal_id}")
            meal_data = None
            
            # meal_id –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –±–ª—é–¥–∞ –≤ –º–∞—Å—Å–∏–≤–µ, –Ω–∞—á–∏–Ω–∞—è —Å 1
            meal_index = request.meal_id - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
            
            if 0 <= meal_index < len(meal_entries):
                meal_data = meal_entries[meal_index]
                print(f"‚úÖ –ë–ª—é–¥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É {meal_index}!")
            else:
                print(f"‚ùå –ò–Ω–¥–µ–∫—Å {meal_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ –±–ª—é–¥: {len(meal_entries)}")
                raise HTTPException(status_code=404, detail="–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            existing_result = await session.execute(
                select(UserHistory).where(
                    UserHistory.user_id == user_id,
                    UserHistory.type == "favorite",
                    cast(UserHistory.data, String).contains('{"meal_id": ' + str(request.meal_id) + '}')
                )
            )
            
            if existing_result.scalar_one_or_none():
                raise HTTPException(status_code=400, detail="–ë–ª—é–¥–æ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            favorite_data = {
                "meal_id": request.meal_id,
                "added_date": datetime.now(timezone.utc).replace(tzinfo=None).isoformat()
            }
            
            new_favorite = UserHistory(
                user_id=user_id,
                type="favorite",
                data=json.dumps(favorite_data),
                timestamp=datetime.now(timezone.utc).replace(tzinfo=None)
            )
            
            session.add(new_favorite)
            await session.commit()
        
        print(f"‚úÖ –ë–ª—é–¥–æ {request.meal_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return {
            "status": "success",
            "message": "–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {str(e)}")

@app.delete("/favorites/{user_id}")
async def remove_favorite(user_id: str, request: FavoriteRequest):
    """–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –±–ª—é–¥–æ {request.meal_id}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from bot import async_session, UserHistory
        from sqlalchemy import select, delete, cast, JSON, String
        
        async with async_session() as session:
            # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            favorite_result = await session.execute(
                select(UserHistory).where(
                    UserHistory.user_id == user_id,
                    UserHistory.type == "favorite",
                    cast(UserHistory.data, String).contains('{"meal_id": ' + str(request.meal_id) + '}')
                )
            )
            
            favorite_record = favorite_result.scalar_one_or_none()
            if not favorite_record:
                raise HTTPException(status_code=404, detail="–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            await session.execute(
                delete(UserHistory).where(UserHistory.id == favorite_record.id)
            )
            await session.commit()
        
        print(f"‚úÖ –ë–ª—é–¥–æ {request.meal_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return {
            "status": "success",
            "message": "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}")

@app.get("/favorites/{user_id}")
async def get_favorites(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥"""
    try:
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from bot import async_session, UserHistory, get_history
        from sqlalchemy import select
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        async with async_session() as session:
            favorites_result = await session.execute(
                select(UserHistory).where(
                    UserHistory.user_id == user_id,
                    UserHistory.type == "favorite"
                ).order_by(UserHistory.timestamp.desc())
            )
            
            favorites_records = favorites_result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–ª—é–¥–∞—Ö
        history = await get_history(user_id)
        
        favorites_list = []
        for favorite_record in favorites_records:
            try:
                favorite_data = json.loads(favorite_record.data)
                meal_id = favorite_data.get("meal_id")
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –±–ª—é–¥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                meal_entry = None
                meal_entries = [entry for entry in history if entry.get("type") == "food"]
                
                # meal_id —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –±–ª—é–¥–∞ –≤ –º–∞—Å—Å–∏–≤–µ, –Ω–∞—á–∏–Ω–∞—è —Å 1
                meal_index = meal_id - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
                
                if 0 <= meal_index < len(meal_entries):
                    meal_entry = meal_entries[meal_index]
                
                if meal_entry:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
                    meal_data = meal_entry.get("data", {})
                    if isinstance(meal_data, str):
                        meal_data = json.loads(meal_data)
                    
                    favorite_item = {
                        "meal_id": meal_id,
                        "description": meal_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"),
                        "time": meal_data.get("time", ""),
                        "calories": meal_data.get("calories", 0),
                        "protein": meal_data.get("protein", 0),
                        "fat": meal_data.get("fat", 0),
                        "carb": meal_data.get("carb", 0),
                        "fiber": meal_data.get("fiber", 0),
                        "image": meal_data.get("image", ""),
                        "products": meal_data.get("products", []),
                        "added_date": favorite_data.get("added_date", favorite_record.timestamp.isoformat())
                    }
                    favorites_list.append(favorite_item)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
                continue
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(favorites_list)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return favorites_list
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}")

# Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
@app.get("/favorites/{user_id}/check/{meal_id}")
async def check_favorite_status(user_id: str, meal_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ –±–ª—é–¥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –±–ª—é–¥–æ {meal_id}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from bot import async_session, UserHistory
        from sqlalchemy import select, cast, JSON, String
        
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            result = await session.execute(
                select(UserHistory).where(
                    UserHistory.user_id == user_id,
                    UserHistory.type == "favorite",
                    cast(UserHistory.data, String).contains('{"meal_id": ' + str(meal_id) + '}')
                )
            )
            
            is_favorite = result.scalar_one_or_none() is not None
        
        return {
            "meal_id": meal_id,
            "is_favorite": is_favorite
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)

