from fastapi import FastAPI, HTTPException, Depends, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import sqlite3
import logging
import re
from datetime import datetime, timedelta, date
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Telegram Bot API", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
security = HTTPBearer()

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É)
VALID_API_KEYS = {"test_api_key", "your_production_api_key"}

def verify_api_key(credentials: HTTPAuthorizationCredentials = Depends(security)):
    if credentials.credentials not in VALID_API_KEYS:
        raise HTTPException(status_code=401, detail="Invalid API key")
    return credentials.credentials

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class DaySummaryResponse(BaseModel):
    date: str
    total_calories: int
    total_protein: float
    total_fat: float
    total_carb: float
    total_fiber: float
    remaining_calories: int
    remaining_protein: float
    remaining_fat: float
    remaining_carb: float
    meals: List[Dict[str, Any]]
    warnings: List[str]
    message: Optional[str] = None

class HistoricalDataResponse(BaseModel):
    dates: List[str]
    calories: List[int]
    protein: List[float]
    fat: List[float]
    carb: List[float]
    fiber: List[float]

class WeeklyStatsResponse(BaseModel):
    week_start: str
    week_end: str
    daily_data: List[Dict[str, Any]]
    weekly_averages: Dict[str, float]
    weekly_totals: Dict[str, float]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('bot_database.db')
        conn.row_factory = sqlite3.Row
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail="Database connection error")

def parse_nutrition_from_text(text: str) -> Dict[str, float]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
    nutrition = {
        'calories': 0.0,
        'protein': 0.0,
        'fat': 0.0,
        'carb': 0.0,
        'fiber': 0.0
    }
    
    try:
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ë–ñ–£
        patterns = {
            'calories': r'(?:–∫–∞–ª–æ—Ä–∏–∏|–∫–∫–∞–ª|—ç–Ω–µ—Ä–≥–∏—è):\s*(\d+(?:\.\d+)?)',
            'protein': r'(?:–±–µ–ª–∫–∏|–±–µ–ª–æ–∫|–ø—Ä–æ—Ç–µ–∏–Ω):\s*(\d+(?:\.\d+)?)',
            'fat': r'(?:–∂–∏—Ä—ã|–∂–∏—Ä):\s*(\d+(?:\.\d+)?)',
            'carb': r'(?:—É–≥–ª–µ–≤–æ–¥—ã|—É–≥–ª–µ–≤–æ–¥|–∫–∞—Ä–±):\s*(\d+(?:\.\d+)?)',
            'fiber': r'(?:–∫–ª–µ—Ç—á–∞—Ç–∫–∞|–≤–æ–ª–æ–∫–Ω–∞):\s*(\d+(?:\.\d+)?)'
        }
        
        for nutrient, pattern in patterns.items():
            match = re.search(pattern, text.lower())
            if match:
                nutrition[nutrient] = float(match.group(1))
                
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ë–ñ–£: {e}")
    
    return nutrition

def get_user_targets(user_id: str) -> Dict[str, float]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT target_kcal, target_protein, target_fat, target_carb, target_fiber
            FROM users WHERE user_id = ?
        """, (user_id,))
        
        result = cursor.fetchone()
        if result:
            return {
                'calories': result['target_kcal'] or 2000,
                'protein': result['target_protein'] or 150,
                'fat': result['target_fat'] or 65,
                'carb': result['target_carb'] or 250,
                'fiber': result['target_fiber'] or 25
            }
        else:
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                'calories': 2000,
                'protein': 150,
                'fat': 65,
                'carb': 250,
                'fiber': 25
            }
    finally:
        conn.close()

def get_user_timezone_offset(user_id: str) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT utc_offset FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return result['utc_offset'] if result and result['utc_offset'] is not None else 0
    finally:
        conn.close()

def get_user_local_date(user_id: str, target_date: Optional[date] = None) -> date:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    offset = get_user_timezone_offset(user_id)
    
    if target_date:
        return target_date
    
    utc_now = datetime.utcnow()
    local_time = utc_now + timedelta(hours=offset)
    return local_time.date()

# API endpoints

@app.get("/api/day-summary/{user_id}")
async def get_day_summary(
    user_id: str, 
    date_str: Optional[str] = Query(None, description="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"),
    api_key: str = Depends(verify_api_key)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–∞—Ç–∞: {date_str}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
        if date_str:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        else:
            target_date = get_user_local_date(user_id)
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        cursor.execute("""
            SELECT created_at, bot_response 
            FROM user_history 
            WHERE user_id = ? AND date(created_at) = ?
            ORDER BY created_at
        """, (user_id, target_date.strftime("%Y-%m-%d")))
        
        records = cursor.fetchall()
        conn.close()
        
        if not records:
            return {
                "success": True,
                "data": {
                    "date": target_date.strftime("%Y-%m-%d"),
                    "message": "–ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏",
                    "total_calories": 0,
                    "total_protein": 0.0,
                    "total_fat": 0.0,
                    "total_carb": 0.0,
                    "total_fiber": 0.0,
                    "remaining_calories": 0,
                    "remaining_protein": 0.0,
                    "remaining_fat": 0.0,
                    "remaining_carb": 0.0,
                    "meals": [],
                    "warnings": []
                }
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        targets = get_user_targets(user_id)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
        total_nutrition = {
            'calories': 0.0,
            'protein': 0.0,
            'fat': 0.0,
            'carb': 0.0,
            'fiber': 0.0
        }
        
        meals = []
        
        for record in records:
            nutrition = parse_nutrition_from_text(record['bot_response'])
            
            # –°—É–º–º–∏—Ä—É–µ–º –ë–ñ–£
            for key in total_nutrition:
                total_nutrition[key] += nutrition[key]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–µ–º –ø–∏—â–∏
            if nutrition['calories'] > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–ª–æ—Ä–∏–∏
                meal_time = datetime.fromisoformat(record['created_at']).strftime("%H:%M")
                meals.append({
                    'time': meal_time,
                    'description': record['bot_response'][:100] + "..." if len(record['bot_response']) > 100 else record['bot_response'],
                    'calories': int(nutrition['calories']),
                    'protein': nutrition['protein'],
                    'fat': nutrition['fat'],
                    'carb': nutrition['carb']
                })
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        remaining = {}
        for key in total_nutrition:
            remaining[f'remaining_{key}'] = max(0, targets[key] - total_nutrition[key])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = []
        
        if total_nutrition['calories'] > targets['calories'] * 1.2:
            warnings.append("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π")
        elif total_nutrition['calories'] < targets['calories'] * 0.7:
            warnings.append("üìâ –ö–∞–ª–æ—Ä–∏–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã")
        
        if total_nutrition['protein'] < targets['protein'] * 0.8:
            warnings.append("ü•© –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–∫–∞")
        
        if total_nutrition['fiber'] < targets['fiber'] * 0.6:
            warnings.append("ü•¨ –ú–∞–ª–æ –∫–ª–µ—Ç—á–∞—Ç–∫–∏")
        
        return {
            "success": True,
            "data": {
                "date": target_date.strftime("%Y-%m-%d"),
                "total_calories": int(total_nutrition['calories']),
                "total_protein": round(total_nutrition['protein'], 1),
                "total_fat": round(total_nutrition['fat'], 1),
                "total_carb": round(total_nutrition['carb'], 1),
                "total_fiber": round(total_nutrition['fiber'], 1),
                "remaining_calories": int(remaining['remaining_calories']),
                "remaining_protein": round(remaining['remaining_protein'], 1),
                "remaining_fat": round(remaining['remaining_fat'], 1),
                "remaining_carb": round(remaining['remaining_carb'], 1),
                "meals": meals,
                "warnings": warnings
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/historical-data/{user_id}")
async def get_historical_data(
    user_id: str,
    days: int = Query(7, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"),
    end_date: Optional[str] = Query(None, description="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"),
    api_key: str = Depends(verify_api_key)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–Ω–µ–π: {days}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        if end_date:
            end_date_obj = datetime.strptime(end_date, "%Y-%m-%d").date()
        else:
            end_date_obj = get_user_local_date(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
        start_date_obj = end_date_obj - timedelta(days=days-1)
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT date(created_at) as date, bot_response 
            FROM user_history 
            WHERE user_id = ? AND date(created_at) BETWEEN ? AND ?
            ORDER BY created_at
        """, (user_id, start_date_obj.strftime("%Y-%m-%d"), end_date_obj.strftime("%Y-%m-%d")))
        
        records = cursor.fetchall()
        conn.close()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        daily_data = {}
        current_date = start_date_obj
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–Ω–∏ –Ω—É–ª—è–º–∏
        while current_date <= end_date_obj:
            date_str = current_date.strftime("%Y-%m-%d")
            daily_data[date_str] = {
                'calories': 0.0,
                'protein': 0.0,
                'fat': 0.0,
                'carb': 0.0,
                'fiber': 0.0
            }
            current_date += timedelta(days=1)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
        for record in records:
            date_str = record['date']
            if date_str in daily_data:
                nutrition = parse_nutrition_from_text(record['bot_response'])
                for key in daily_data[date_str]:
                    daily_data[date_str][key] += nutrition[key]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        dates = []
        calories = []
        protein = []
        fat = []
        carb = []
        fiber = []
        
        for date_str in sorted(daily_data.keys()):
            dates.append(date_str)
            calories.append(int(daily_data[date_str]['calories']))
            protein.append(round(daily_data[date_str]['protein'], 1))
            fat.append(round(daily_data[date_str]['fat'], 1))
            carb.append(round(daily_data[date_str]['carb'], 1))
            fiber.append(round(daily_data[date_str]['fiber'], 1))
        
        return {
            "success": True,
            "data": {
                "dates": dates,
                "calories": calories,
                "protein": protein,
                "fat": fat,
                "carb": carb,
                "fiber": fiber
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/weekly-stats/{user_id}")
async def get_weekly_stats(
    user_id: str,
    week_offset: int = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ (0 - —Ç–µ–∫—É—â–∞—è, -1 - –ø—Ä–µ–¥—ã–¥—É—â–∞—è, –∏ —Ç.–¥.)"),
    api_key: str = Depends(verify_api_key)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–º–µ—â–µ–Ω–∏–µ: {week_offset}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
        today = get_user_local_date(user_id)
        days_since_monday = today.weekday()
        week_start = today - timedelta(days=days_since_monday) + timedelta(weeks=week_offset)
        week_end = week_start + timedelta(days=6)
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
        cursor.execute("""
            SELECT date(created_at) as date, bot_response 
            FROM user_history 
            WHERE user_id = ? AND date(created_at) BETWEEN ? AND ?
            ORDER BY created_at
        """, (user_id, week_start.strftime("%Y-%m-%d"), week_end.strftime("%Y-%m-%d")))
        
        records = cursor.fetchall()
        conn.close()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        daily_data = {}
        current_date = week_start
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        while current_date <= week_end:
            date_str = current_date.strftime("%Y-%m-%d")
            daily_data[date_str] = {
                'date': date_str,
                'day_name': current_date.strftime("%A"),
                'calories': 0.0,
                'protein': 0.0,
                'fat': 0.0,
                'carb': 0.0,
                'fiber': 0.0
            }
            current_date += timedelta(days=1)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for record in records:
            date_str = record['date']
            if date_str in daily_data:
                nutrition = parse_nutrition_from_text(record['bot_response'])
                for key in ['calories', 'protein', 'fat', 'carb', 'fiber']:
                    daily_data[date_str][key] += nutrition[key]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏ –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        weekly_totals = {
            'calories': 0.0,
            'protein': 0.0,
            'fat': 0.0,
            'carb': 0.0,
            'fiber': 0.0
        }
        
        days_with_data = 0
        for day_data in daily_data.values():
            if day_data['calories'] > 0:
                days_with_data += 1
            for key in weekly_totals:
                weekly_totals[key] += day_data[key]
        
        weekly_averages = {}
        for key in weekly_totals:
            if days_with_data > 0:
                weekly_averages[key] = round(weekly_totals[key] / days_with_data, 1)
            else:
                weekly_averages[key] = 0.0
            weekly_totals[key] = round(weekly_totals[key], 1)
        
        return {
            "success": True,
            "data": {
                "week_start": week_start.strftime("%Y-%m-%d"),
                "week_end": week_end.strftime("%Y-%m-%d"),
                "daily_data": list(daily_data.values()),
                "weekly_averages": weekly_averages,
                "weekly_totals": weekly_totals
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@app.get("/api/stats/{user_id}")
async def get_stats(user_id: str, api_key: str = Depends(verify_api_key)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ç–æ–≥–∞–º–∏ –¥–Ω—è"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_date = get_user_local_date(user_id)
        cursor.execute("""
            SELECT created_at, bot_response 
            FROM user_history 
            WHERE user_id = ? AND date(created_at) = ?
            ORDER BY created_at
        """, (user_id, today_date.strftime("%Y-%m-%d")))
        
        today_records = cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è
        today_summary = None
        if today_records:
            targets = get_user_targets(user_id)
            total_nutrition = {'calories': 0.0, 'protein': 0.0, 'fat': 0.0, 'carb': 0.0, 'fiber': 0.0}
            meals = []
            
            for record in today_records:
                nutrition = parse_nutrition_from_text(record['bot_response'])
                for key in total_nutrition:
                    total_nutrition[key] += nutrition[key]
                
                if nutrition['calories'] > 0:
                    meal_time = datetime.fromisoformat(record['created_at']).strftime("%H:%M")
                    meals.append({
                        'time': meal_time,
                        'description': record['bot_response'][:100] + "..." if len(record['bot_response']) > 100 else record['bot_response'],
                        'calories': int(nutrition['calories'])
                    })
            
            remaining = {}
            for key in total_nutrition:
                remaining[f'remaining_{key}'] = max(0, targets[key] - total_nutrition[key])
            
            warnings = []
            if total_nutrition['calories'] > targets['calories'] * 1.2:
                warnings.append("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π")
            elif total_nutrition['calories'] < targets['calories'] * 0.7:
                warnings.append("üìâ –ö–∞–ª–æ—Ä–∏–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã")
            
            today_summary = {
                "total_calories": int(total_nutrition['calories']),
                "total_protein": round(total_nutrition['protein'], 1),
                "total_fat": round(total_nutrition['fat'], 1),
                "total_carb": round(total_nutrition['carb'], 1),
                "remaining_calories": int(remaining['remaining_calories']),
                "remaining_protein": round(remaining['remaining_protein'], 1),
                "remaining_fat": round(remaining['remaining_fat'], 1),
                "remaining_carb": round(remaining['remaining_carb'], 1),
                "meals": meals,
                "warnings": warnings
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        cursor.execute("""
            SELECT COUNT(*) as total_records,
                   COUNT(DISTINCT date(created_at)) as days_tracked
            FROM user_history 
            WHERE user_id = ?
        """, (user_id,))
        
        general_stats = cursor.fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = today_date - timedelta(days=30)
        cursor.execute("""
            SELECT bot_response 
            FROM user_history 
            WHERE user_id = ? AND date(created_at) >= ?
        """, (user_id, thirty_days_ago.strftime("%Y-%m-%d")))
        
        recent_records = cursor.fetchall()
        conn.close()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π
        total_nutrition_30d = {'calories': 0.0, 'protein': 0.0, 'fat': 0.0, 'carb': 0.0}
        daily_calories = {}
        
        for record in recent_records:
            nutrition = parse_nutrition_from_text(record['bot_response'])
            for key in total_nutrition_30d:
                total_nutrition_30d[key] += nutrition[key]
        
        days_tracked = general_stats['days_tracked'] or 1
        avg_calories = int(total_nutrition_30d['calories'] / days_tracked) if days_tracked > 0 else 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        targets = get_user_targets(user_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –Ω–æ—Ä–º—ã
        adherence_percent = min(100, int((avg_calories / targets['calories']) * 100)) if targets['calories'] > 0 else 0
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ë–ñ–£
        total_macros = total_nutrition_30d['protein'] + total_nutrition_30d['fat'] + total_nutrition_30d['carb']
        if total_macros > 0:
            protein_percent = int((total_nutrition_30d['protein'] / total_macros) * 100)
            fat_percent = int((total_nutrition_30d['fat'] / total_macros) * 100)
            carb_percent = 100 - protein_percent - fat_percent
        else:
            protein_percent = fat_percent = carb_percent = 0
        
        return {
            "success": True,
            "data": {
                "today_summary": today_summary,
                "general": {
                    "avg_calories": avg_calories,
                    "days_tracked": days_tracked,
                    "adherence_percent": adherence_percent,
                    "weight_change": 0  # –ó–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                },
                "nutrition_distribution": {
                    "protein": protein_percent,
                    "fat": fat_percent,
                    "carb": carb_percent
                },
                "user_targets": {
                    "calories": int(targets['calories']),
                    "protein": int(targets['protein']),
                    "fat": int(targets['fat']),
                    "carb": int(targets['carb'])
                }
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –û—Å—Ç–∞–ª—å–Ω—ã–µ endpoints –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

@app.get("/api/diary/{user_id}")
async def get_diary(user_id: str, api_key: str = Depends(verify_api_key)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        seven_days_ago = datetime.now() - timedelta(days=7)
        cursor.execute("""
            SELECT created_at, bot_response 
            FROM user_history 
            WHERE user_id = ? AND created_at >= ?
            ORDER BY created_at DESC
            LIMIT 50
        """, (user_id, seven_days_ago.isoformat()))
        
        records = cursor.fetchall()
        conn.close()
        
        diary_entries = []
        for record in records:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            created_at = datetime.fromisoformat(record['created_at'])
            
            diary_entries.append({
                'date': created_at.strftime('%Y-%m-%d'),
                'time': created_at.strftime('%H:%M'),
                'content': record['bot_response'][:200] + "..." if len(record['bot_response']) > 200 else record['bot_response'],
                'full_content': record['bot_response']
            })
        
        return {
            "success": True,
            "data": {
                "entries": diary_entries,
                "total_entries": len(diary_entries)
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/recipes/{user_id}")
async def get_recipes(user_id: str, api_key: str = Depends(verify_api_key)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    sample_recipes = [
        {
            "title": "–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —è–≥–æ–¥–∞–º–∏",
            "description": "–ü–æ–ª–µ–∑–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–ª–µ—Ç—á–∞—Ç–∫–∏",
            "calories": 320,
            "protein": 12,
            "prep_time": "10 –º–∏–Ω",
            "difficulty": "–õ–µ–≥–∫–æ"
        },
        {
            "title": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –æ–≤–æ—â–∞–º–∏",
            "description": "–ë–µ–ª–∫–æ–≤–æ–µ –±–ª—é–¥–æ –¥–ª—è –æ–±–µ–¥–∞ –∏–ª–∏ —É–∂–∏–Ω–∞",
            "calories": 450,
            "protein": 35,
            "prep_time": "25 –º–∏–Ω",
            "difficulty": "–°—Ä–µ–¥–Ω–µ"
        },
        {
            "title": "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç",
            "description": "–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç —Å —Å—ã—Ä–æ–º —Ñ–µ—Ç–∞ –∏ –æ–ª–∏–≤–∫–∞–º–∏",
            "calories": 280,
            "protein": 8,
            "prep_time": "15 –º–∏–Ω",
            "difficulty": "–õ–µ–≥–∫–æ"
        }
    ]
    
    return {
        "success": True,
        "data": {
            "recipes": sample_recipes,
            "total_recipes": len(sample_recipes)
        }
    }

@app.get("/api/profile/{user_id}")
async def get_profile(user_id: str, api_key: str = Depends(verify_api_key)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT gender, age, height, weight, goal, activity, pregnant, 
                   target_kcal, target_protein, target_fat, target_carb, target_fiber,
                   utc_offset, morning_reminded
            FROM users WHERE user_id = ?
        """, (user_id,))
        
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            raise HTTPException(status_code=404, detail="User not found")
        
        return {
            "success": True,
            "data": {
                "gender": result['gender'],
                "age": result['age'],
                "height": result['height'],
                "weight": result['weight'],
                "goal": result['goal'],
                "activity": result['activity'],
                "pregnant": bool(result['pregnant']) if result['pregnant'] is not None else False,
                "target_kcal": result['target_kcal'],
                "target_protein": result['target_protein'],
                "target_fat": result['target_fat'],
                "target_carb": result['target_carb'],
                "target_fiber": result['target_fiber'],
                "utc_offset": result['utc_offset'] or 0,
                "morning_reminded": bool(result['morning_reminded']) if result['morning_reminded'] is not None else False
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.put("/api/profile/{user_id}")
async def update_profile(user_id: str, profile_data: dict, api_key: str = Depends(verify_api_key)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        update_fields = []
        values = []
        
        allowed_fields = ['gender', 'age', 'height', 'weight', 'goal', 'activity', 'pregnant', 'utc_offset', 'morning_reminded']
        
        for field in allowed_fields:
            if field in profile_data:
                update_fields.append(f"{field} = ?")
                values.append(profile_data[field])
        
        if update_fields:
            values.append(user_id)
            sql = f"UPDATE users SET {', '.join(update_fields)} WHERE user_id = ?"
            cursor.execute(sql, values)
            conn.commit()
        
        conn.close()
        
        return {
            "success": True,
            "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/profile/{user_id}/recalculate")
async def recalculate_targets(user_id: str, api_key: str = Depends(verify_api_key)):
    """–ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT gender, age, height, weight, goal, activity, pregnant
            FROM users WHERE user_id = ?
        """, (user_id,))
        
        result = cursor.fetchone()
        if not result:
            raise HTTPException(status_code=404, detail="User not found")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç BMR (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º)
        if result['gender'] == '–º—É–∂':
            bmr = 88.362 + (13.397 * result['weight']) + (4.799 * result['height']) - (5.677 * result['age'])
        else:
            bmr = 447.593 + (9.247 * result['weight']) + (3.098 * result['height']) - (4.330 * result['age'])
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_multipliers = {
            '–Ω–∏–∑–∫–∏–π': 1.2,
            '—Å—Ä–µ–¥–Ω–∏–π': 1.55,
            '–≤—ã—Å–æ–∫–∏–π': 1.9
        }
        
        multiplier = activity_multipliers.get(result['activity'], 1.2)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏/–ì–í
        if result['pregnant']:
            multiplier += 0.2
        
        target_calories = int(bmr * multiplier)
        
        # –†–∞—Å—á–µ—Ç –ë–ñ–£ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
        target_protein = int(target_calories * 0.25 / 4)  # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
        target_fat = int(target_calories * 0.30 / 9)      # 30% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
        target_carb = int(target_calories * 0.45 / 4)     # 45% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
        target_fiber = max(25, int(target_calories / 100)) # –ü—Ä–∏–º–µ—Ä–Ω–æ 1–≥ –Ω–∞ 100 –∫–∫–∞–ª
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            UPDATE users SET 
                target_kcal = ?, target_protein = ?, target_fat = ?, 
                target_carb = ?, target_fiber = ?
            WHERE user_id = ?
        """, (target_calories, target_protein, target_fat, target_carb, target_fiber, user_id))
        
        conn.commit()
        conn.close()
        
        return {
            "success": True,
            "message": "–¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã",
            "data": {
                "target_kcal": target_calories,
                "target_protein": target_protein,
                "target_fat": target_fat,
                "target_carb": target_carb,
                "target_fiber": target_fiber
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {"message": "Telegram Bot API Server", "version": "1.0.0"}

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

