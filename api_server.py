from fastapi import FastAPI, HTTPException, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uvicorn
import os
from dotenv import load_dotenv
import sys
import json
from datetime import datetime, timedelta, date, timezone
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI(title="Telegram Bot WebApp API", 
              description="API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebApp —Å Telegram –±–æ—Ç–æ–º —Ç—Ä–µ–∫–µ—Ä–∞ –ø–∏—Ç–∞–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å Netlify
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class MealEntry(BaseModel):
    time: str
    name: str
    calories: int
    items: List[Dict[str, Any]]

class DiaryDay(BaseModel):
    date: str
    total_calories: int
    meals: List[MealEntry]

class NutritionStats(BaseModel):
    calories: int
    protein: int
    fat: int
    carb: int
    fiber: float

class UserStats(BaseModel):
    avg_calories: int
    days_tracked: int
    adherence_percent: int
    weight_change: float
    nutrition_distribution: Dict[str, int]
    top_products: List[Dict[str, Any]]

class Recipe(BaseModel):
    title: str
    category: str
    prep_time: str
    calories: int
    description: str
    portions: int
    nutrition: NutritionStats

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProfileUpdateData(BaseModel):
    gender: Optional[str] = None
    age: Optional[int] = None
    height: Optional[int] = None
    weight: Optional[float] = None
    goal: Optional[float] = None
    activity: Optional[str] = None
    pregnant: Optional[bool] = None
    utc_offset: Optional[int] = None
    morning_reminded: Optional[bool] = None

# –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
class DaySummary(BaseModel):
    date: str
    total_calories: int
    total_protein: int
    total_fat: int
    total_carb: int
    total_fiber: float
    meals: List[Dict[str, Any]]
    remaining_calories: int
    remaining_protein: int
    remaining_fat: int
    remaining_carb: int
    remaining_fiber: float
    warnings: List[str]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API-–∫–ª—é—á–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
async def verify_api_key(x_api_key: str = Header(None)):
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return x_api_key or "debug_key"

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç API
@app.get("/api")
async def api_root():
    return {"status": "success", "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç", "timestamp": datetime.now().isoformat()}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
@app.get("/api/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

# –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
@app.get("/api/day-summary/{user_id}", response_model=Dict[str, Any])
async def get_day_summary(user_id: str, date_str: Optional[str] = None, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_user_data, get_history
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ get_day_summary: {import_error}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ bot.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            target_date = date_str or datetime.now().strftime("%Y-%m-%d")
            return {
                "status": "success", 
                "data": {
                    "date": target_date,
                    "total_calories": 1500,
                    "total_protein": 80,
                    "total_fat": 50,
                    "total_carb": 180,
                    "total_fiber": 15.5,
                    "meals": [
                        {
                            "id": 1,
                            "time": "08:30",
                            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≤—Ç—Ä–∞–∫",
                            "calories": 400,
                            "protein": 20,
                            "fat": 15,
                            "carb": 50
                        }
                    ],
                    "remaining_calories": 500,
                    "remaining_protein": 20,
                    "remaining_fat": 17,
                    "remaining_carb": 70,
                    "remaining_fiber": 9.5,
                    "warnings": ["üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"],
                    "message": "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (bot.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                }
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        user_offset = user_data.get("utc_offset", 0)
        user_tz = timezone(timedelta(hours=user_offset))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if date_str:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        else:
            target_date = datetime.now(user_tz).date()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = await get_history(user_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        entries_today = [e for e in history if e["timestamp"].astimezone(user_tz).date() == target_date]
        
        if not entries_today:
            return {
                "status": "success", 
                "data": {
                    "date": target_date.strftime("%Y-%m-%d"),
                    "total_calories": 0,
                    "total_protein": 0,
                    "total_fat": 0,
                    "total_carb": 0,
                    "total_fiber": 0,
                    "meals": [],
                    "remaining_calories": user_data.get("target_kcal", 0),
                    "remaining_protein": user_data.get("target_protein", 0),
                    "remaining_fat": user_data.get("target_fat", 0),
                    "remaining_carb": user_data.get("target_carb", 0),
                    "remaining_fiber": user_data.get("target_fiber", 20),
                    "warnings": [],
                    "message": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞."
                }
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        total_kcal = total_prot = total_fat = total_carb = total_fiber = 0.0
        meals = []
        
        for i, entry in enumerate(entries_today, start=1):
            kcal = prot = fat = carb = fiber = 0.0
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            match = re.search(
                r'–ò—Ç–æ–≥–æ:\s*[~‚âà]?\s*(\d+\.?\d*)\s*–∫–∫–∞–ª.*?'
                r'–ë–µ–ª–∫–∏[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                r'–ñ–∏—Ä—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                r'–£–≥–ª–µ–≤–æ–¥—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                r'–ö–ª–µ—Ç—á–∞—Ç–∫–∞[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥',
                entry['response'], flags=re.IGNORECASE | re.DOTALL
            )
            
            if match:
                kcal, prot, fat, carb = map(lambda x: round(float(x)), match.groups()[:4])
                fiber = round(float(match.groups()[4]), 1)
                total_fiber += fiber
            
            total_kcal += kcal
            total_prot += prot
            total_fat += fat
            total_carb += carb
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            lines = entry['response'].splitlines()
            food_lines = [line for line in lines if line.strip().startswith(("‚Ä¢", "-"))]
            short_desc = ", ".join([re.sub(r'^[‚Ä¢\-]\s*', '', line).split("‚Äì")[0].strip() for line in food_lines]) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            
            meals.append({
                "id": i,
                "time": entry['timestamp'].strftime("%H:%M"),
                "description": short_desc,
                "calories": kcal,
                "protein": prot,
                "fat": fat,
                "carb": carb,
                "fiber": fiber,
                "full_response": entry['response'],
                "timestamp": entry['timestamp'].isoformat()
            })
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        target_kcal = int(user_data.get("target_kcal", 0))
        target_protein = int(user_data.get("target_protein", 0))
        target_fat = int(user_data.get("target_fat", 0))
        target_carb = int(user_data.get("target_carb", 0))
        target_fiber = int(user_data.get("target_fiber", 20))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        remaining_kcal = target_kcal - total_kcal
        remaining_prot = target_protein - total_prot
        remaining_fat = target_fat - total_fat
        remaining_carb = target_carb - total_carb
        remaining_fiber = target_fiber - total_fiber
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = []
        if remaining_kcal < 0:
            maintenance_kcal = int(target_kcal / 0.83) if target_kcal else 0
            if total_kcal <= maintenance_kcal and user_data.get("goal", 0) < user_data.get("weight", 0):
                warnings.append(
                    f"‚öñÔ∏è –ü–æ –∫–∞–ª–æ—Ä–∏—è–º —É–∂–µ –ø–µ—Ä–µ–±–æ—Ä –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è, –Ω–æ —Ç—ã –≤—Å—ë –µ—â—ë –≤ —Ä–∞–º–∫–∞—Ö –Ω–æ—Ä–º—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞ ‚Äî –¥–æ –Ω–µ—ë –µ—â—ë {maintenance_kcal - total_kcal} –∫–∫–∞–ª. –í–µ—Å –Ω–µ –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π üòä"
                )
            else:
                warnings.append("üç© –ö–∞–ª–æ—Ä–∏–π –≤—ã—à–ª–æ —á—É—Ç—å –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –Ω–æ –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ —á—É—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ üòâ")
        
        if remaining_prot < 0:
            warnings.append("ü•© –ë–µ–ª–∫–∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å –±–æ–ª—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ.")
        
        if remaining_fat < 0:
            warnings.append("üßà –ñ–∏—Ä–æ–≤ –≤—ã—à–ª–æ –º–Ω–æ–≥–æ–≤–∞—Ç–æ ‚Äî –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, –º–æ–∂–µ—Ç –≥–¥–µ-—Ç–æ –º–∞—Å–ª–æ –ª–∏—à–Ω–µ–µ.")
        
        if remaining_carb < 0:
            warnings.append("üçû –£–≥–ª–µ–≤–æ–¥–æ–≤ –ø–µ—Ä–µ–±–æ—Ä ‚Äî –º–æ–∂–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –º–Ω–æ–≥–æ —Å–ª–∞–¥–∫–æ–≥–æ?")
        
        summary_data = {
            "date": target_date.strftime("%Y-%m-%d"),
            "total_calories": int(total_kcal),
            "total_protein": int(total_prot),
            "total_fat": int(total_fat),
            "total_carb": int(total_carb),
            "total_fiber": round(total_fiber, 1),
            "meals": meals,
            "remaining_calories": max(0, remaining_kcal),
            "remaining_protein": max(0, remaining_prot),
            "remaining_fat": max(0, remaining_fat),
            "remaining_carb": max(0, remaining_carb),
            "remaining_fiber": max(0, round(remaining_fiber, 1)),
            "warnings": warnings,
            "targets": {
                "calories": target_kcal,
                "protein": target_protein,
                "fat": target_fat,
                "carb": target_carb,
                "fiber": target_fiber
            }
        }
        
        return {"status": "success", "data": summary_data}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API
@app.get("/api/diary/{user_id}", response_model=Dict[str, Any])
async def get_diary(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_user_data, get_history
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ get_diary: {import_error}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ bot.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return {
                "status": "success", 
                "data": {
                    "days": [
                        {
                            "date": "06.08.2025",
                            "total_calories": 1800,
                            "meals": [
                                {
                                    "time": "08:30",
                                    "name": "–ó–∞–≤—Ç—Ä–∞–∫",
                                    "calories": 400,
                                    "items": [{"name": "–û–≤—Å—è–Ω–∫–∞", "calories": 150}]
                                }
                            ]
                        }
                    ],
                    "user_targets": {
                        "calories": 2000,
                        "protein": 100,
                        "fat": 67,
                        "carb": 250,
                        "fiber": 25
                    }
                }
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = await get_history(user_id)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        diary_data = {
            "days": [],
            "user_targets": {
                "calories": user_data.get("target_kcal", 2000),
                "protein": user_data.get("target_protein", 100),
                "fat": user_data.get("target_fat", 67),
                "carb": user_data.get("target_carb", 250),
                "fiber": user_data.get("target_fiber", 25)
            }
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
        days_dict = {}
        for entry in history:
            if entry.get("type") != "food":
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ timestamp
            entry_date = entry.get("timestamp").date() if isinstance(entry.get("timestamp"), datetime) else datetime.fromisoformat(entry.get("timestamp")).date()
            date_str = entry_date.strftime("%Y-%m-%d")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if date_str not in days_dict:
                days_dict[date_str] = {
                    "date": entry_date.strftime("%d.%m.%Y"),
                    "total_calories": 0,
                    "meals": []
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            calories = 0
            match = re.search(r"(\d+(?:[.,]\d+)?) –∫–∫–∞–ª", entry.get("response", ""))
            if match:
                calories = int(float(match.group(1).replace(",", ".")))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            items = []
            for line in entry.get("response", "").split("\n"):
                if line.strip().startswith("‚Ä¢") or line.strip().startswith("-"):
                    item_parts = line.strip()[1:].strip().split("‚Äì")
                    if len(item_parts) >= 2:
                        item_name = item_parts[0].strip()
                        item_calories = 0
                        cal_match = re.search(r"(\d+(?:[.,]\d+)?) –∫–∫–∞–ª", item_parts[1])
                        if cal_match:
                            item_calories = int(float(cal_match.group(1).replace(",", ".")))
                        items.append({"name": item_name, "calories": item_calories})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–µ–º –ø–∏—â–∏
            meal_time = entry_date.strftime("%H:%M")
            if "timestamp" in entry and isinstance(entry.get("timestamp"), datetime):
                meal_time = entry.get("timestamp").strftime("%H:%M")
            
            meal_name = "–ü—Ä–∏–µ–º –ø–∏—â–∏"
            if "–∑–∞–≤—Ç—Ä–∞–∫" in entry.get("prompt", "").lower():
                meal_name = "–ó–∞–≤—Ç—Ä–∞–∫"
            elif "–æ–±–µ–¥" in entry.get("prompt", "").lower():
                meal_name = "–û–±–µ–¥"
            elif "—É–∂–∏–Ω" in entry.get("prompt", "").lower():
                meal_name = "–£–∂–∏–Ω"
            elif "–ø–µ—Ä–µ–∫—É—Å" in entry.get("prompt", "").lower():
                meal_name = "–ü–µ—Ä–µ–∫—É—Å"
            
            days_dict[date_str]["meals"].append({
                "time": meal_time,
                "name": meal_name,
                "calories": calories,
                "items": items
            })
            
            days_dict[date_str]["total_calories"] += calories
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        sorted_days = sorted(days_dict.values(), key=lambda x: datetime.strptime(x["date"], "%d.%m.%Y"), reverse=True)
        diary_data["days"] = sorted_days
        
        return {"status": "success", "data": diary_data}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/stats/{user_id}", response_model=Dict[str, Any])
async def get_stats(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_user_data, get_history, calculate_summary_text
            print(f"–£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot.py –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ get_stats: {import_error}")
            # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            # return —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –£–ë–ò–†–ê–ï–ú –≠–¢–û
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_data = await get_user_data(user_id)
            print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_data = {
                "target_kcal": 2000,
                "target_protein": 100,
                "target_fat": 67,
                "target_carb": 250,
                "target_fiber": 25,
                "utc_offset": 0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            history = await get_history(user_id)
            print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(history)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            history = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ (photo –∏ text —Ç–∏–ø—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–¥–µ)
        food_entries = [entry for entry in history if entry.get("type") in ["photo", "text"]]
        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ: {len(food_entries)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        types_count = {}
        for entry in history:
            entry_type = entry.get("type", "unknown")
            types_count[entry_type] = types_count.get(entry_type, 0) + 1
        print(f"–¢–∏–ø—ã –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {types_count}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not food_entries:
            print("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            stats_data = {
                "general": {
                    "avg_calories": 0,
                    "days_tracked": 0,
                    "adherence_percent": 0,
                    "weight_change": 0
                },
                "nutrition_distribution": {
                    "protein": 33,
                    "fat": 33,
                    "carb": 34
                },
                "top_products": [],
                "user_targets": {
                    "calories": user_data.get("target_kcal", 2000),
                    "protein": user_data.get("target_protein", 100),
                    "fat": user_data.get("target_fat", 67),
                    "carb": user_data.get("target_carb", 250),
                    "fiber": user_data.get("target_fiber", 25)
                },
                "today_summary": None
            }
            return {"status": "success", "data": stats_data}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–Ω–µ–π
        days = {}
        total_calories = 0
        total_protein = 0
        total_fat = 0
        total_carb = 0
        
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(food_entries)} –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ")
        
        for i, entry in enumerate(food_entries):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ timestamp
                timestamp = entry.get("timestamp")
                if isinstance(timestamp, datetime):
                    entry_date = timestamp.date()
                else:
                    entry_date = datetime.fromisoformat(str(timestamp)).date()
                date_str = entry_date.strftime("%Y-%m-%d")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if date_str not in days:
                    days[date_str] = {
                        "calories": 0,
                        "protein": 0,
                        "fat": 0,
                        "carb": 0
                    }
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                response = entry.get("response", "")
                match = re.search(r"(\d+(?:[.,]\d+)?) –∫–∫–∞–ª, –ë–µ–ª–∫–∏: (\d+(?:[.,]\d+)?) –≥, –ñ–∏—Ä—ã: (\d+(?:[.,]\d+)?) –≥, –£–≥–ª–µ–≤–æ–¥—ã: (\d+(?:[.,]\d+)?) –≥", response)
                
                if match:
                    kcal, prot, fat, carb = map(lambda x: float(x.replace(",", ".")), match.groups()[:4])
                    days[date_str]["calories"] += kcal
                    days[date_str]["protein"] += prot
                    days[date_str]["fat"] += fat
                    days[date_str]["carb"] += carb
                    
                    total_calories += kcal
                    total_protein += prot
                    total_fat += fat
                    total_carb += carb
                    
                    if i < 5:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        print(f"–ó–∞–ø–∏—Å—å {i+1}: {kcal} –∫–∫–∞–ª, {prot}–≥ –±–µ–ª–∫–æ–≤, {fat}–≥ –∂–∏—Ä–æ–≤, {carb}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤")
                else:
                    if i < 5:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –ë–ñ–£
                        print(f"–ó–∞–ø–∏—Å—å {i+1}: –ë–ñ–£ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ: {response[:100]}...")
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i+1}: {e}")
                continue
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π. –í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories}, –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {len(days)}")
        
        days_tracked = len(days)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∫–∞–ª–æ—Ä–∏–π - —É—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
        if food_entries:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
            sorted_entries = sorted(food_entries, key=lambda x: x.get("timestamp") if isinstance(x.get("timestamp"), datetime) else datetime.fromisoformat(str(x.get("timestamp"))))
            first_date = sorted_entries[0].get("timestamp")
            last_date = sorted_entries[-1].get("timestamp")
            
            if isinstance(first_date, str):
                first_date = datetime.fromisoformat(first_date)
            if isinstance(last_date, str):
                last_date = datetime.fromisoformat(last_date)
                
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
            total_period_days = (last_date.date() - first_date.date()).days + 1
            avg_calories = round(total_calories / total_period_days) if total_period_days > 0 else 0
            
            print(f"–ü–µ—Ä–∏–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {first_date.date()} - {last_date.date()} ({total_period_days} –¥–Ω–µ–π)")
            print(f"–°—Ä–µ–¥–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {total_calories} / {total_period_days} = {avg_calories}")
        else:
            avg_calories = 0
        
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ë–ñ–£
        total_nutrients = total_protein + total_fat + total_carb
        
        protein_percent = round((total_protein / total_nutrients * 100) if total_nutrients > 0 else 0)
        fat_percent = round((total_fat / total_nutrients * 100) if total_nutrients > 0 else 0)
        carb_percent = round((total_carb / total_nutrients * 100) if total_nutrients > 0 else 0)
        
        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞
        weight_entries = [entry for entry in history if entry.get("type") == "weight"]
        weight_entries.sort(key=lambda x: x.get("timestamp") if isinstance(x.get("timestamp"), datetime) else datetime.fromisoformat(x.get("timestamp")))
        weight_change = 0
        if len(weight_entries) >= 2:
            first_weight = float(weight_entries[0].get("weight", 0))
            last_weight = float(weight_entries[-1].get("weight", 0))
            weight_change = last_weight - first_weight
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products = {}
        for entry in food_entries:
            for line in entry.get("response", "").split("\n"):
                if line.strip().startswith("‚Ä¢") or line.strip().startswith("-"):
                    item_parts = line.strip()[1:].strip().split("‚Äì")
                    if len(item_parts) >= 1:
                        product_name = item_parts[0].strip()
                        products[product_name] = products.get(product_name, 0) + 1
        
        top_products = [{"name": name, "count": count} for name, count in sorted(products.items(), key=lambda x: x[1], reverse=True)[:5]]
        
        # –†–∞—Å—á–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –Ω–æ—Ä–º—ã
        target_kcal = user_data.get("target_kcal", 2000)
        adherence_percent = round((avg_calories / target_kcal * 100) if target_kcal > 0 else 0)
        if adherence_percent > 100:
            adherence_percent = 200 - adherence_percent  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%
        adherence_percent = max(0, min(100, adherence_percent))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 100
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        user_offset = user_data.get("utc_offset", 0)
        user_tz = timezone(timedelta(hours=user_offset))
        today = datetime.now(user_tz).date()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ API endpoint
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            entries_today = [e for e in history if e["timestamp"].astimezone(user_tz).date() == today]
            
            if entries_today:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today_kcal = today_prot = today_fat = today_carb = today_fiber = 0.0
                today_meals = []
                
                for i, entry in enumerate(entries_today, start=1):
                    kcal = prot = fat = carb = fiber = 0.0
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    match = re.search(
                        r'–ò—Ç–æ–≥–æ:\s*[~‚âà]?\s*(\d+\.?\d*)\s*–∫–∫–∞–ª.*?'
                        r'–ë–µ–ª–∫–∏[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                        r'–ñ–∏—Ä—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                        r'–£–≥–ª–µ–≤–æ–¥—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                        r'–ö–ª–µ—Ç—á–∞—Ç–∫–∞[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥',
                        entry['response'], flags=re.IGNORECASE | re.DOTALL
                    )
                    
                    if match:
                        kcal, prot, fat, carb = map(lambda x: round(float(x)), match.groups()[:4])
                        fiber = round(float(match.groups()[4]), 1)
                    
                    today_kcal += kcal
                    today_prot += prot
                    today_fat += fat
                    today_carb += carb
                    today_fiber += fiber
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    lines = entry['response'].splitlines()
                    food_lines = [line for line in lines if line.strip().startswith(("‚Ä¢", "-"))]
                    short_desc = ", ".join([re.sub(r'^[‚Ä¢\-]\s*', '', line).split("‚Äì")[0].strip() for line in food_lines]) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                    
                    today_meals.append({
                        "time": entry['timestamp'].strftime("%H:%M"),
                        "description": short_desc,
                        "calories": kcal
                    })
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                target_kcal = int(user_data.get("target_kcal", 2000))
                target_protein = int(user_data.get("target_protein", 100))
                target_fat = int(user_data.get("target_fat", 67))
                target_carb = int(user_data.get("target_carb", 250))
                target_fiber = int(user_data.get("target_fiber", 25))
                
                today_summary_data = {
                    "date": today.strftime("%Y-%m-%d"),
                    "total_calories": int(today_kcal),
                    "total_protein": int(today_prot),
                    "total_fat": int(today_fat),
                    "total_carb": int(today_carb),
                    "total_fiber": round(today_fiber, 1),
                    "meals": today_meals,
                    "remaining_calories": max(0, target_kcal - today_kcal),
                    "remaining_protein": max(0, target_protein - today_prot),
                    "remaining_fat": max(0, target_fat - today_fat),
                    "remaining_carb": max(0, target_carb - today_carb),
                    "remaining_fiber": max(0, round(target_fiber - today_fiber, 1)),
                    "warnings": []
                }
            else:
                today_summary_data = {
                    "date": today.strftime("%Y-%m-%d"),
                    "total_calories": 0,
                    "total_protein": 0,
                    "total_fat": 0,
                    "total_carb": 0,
                    "total_fiber": 0,
                    "meals": [],
                    "remaining_calories": user_data.get("target_kcal", 2000),
                    "remaining_protein": user_data.get("target_protein", 100),
                    "remaining_fat": user_data.get("target_fat", 67),
                    "remaining_carb": user_data.get("target_carb", 250),
                    "remaining_fiber": user_data.get("target_fiber", 25),
                    "warnings": []
                }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è: {e}")
            today_summary_data = None
        
        stats_data = {
            "general": {
                "avg_calories": avg_calories,
                "days_tracked": days_tracked,
                "adherence_percent": adherence_percent,
                "weight_change": round(weight_change, 1)
            },
            "nutrition_distribution": {
                "protein": protein_percent,
                "fat": fat_percent,
                "carb": carb_percent
            },
            "top_products": top_products,
            "user_targets": {
                "calories": user_data.get("target_kcal", 2000),
                "protein": user_data.get("target_protein", 100),
                "fat": user_data.get("target_fat", 67),
                "carb": user_data.get("target_carb", 250),
                "fiber": user_data.get("target_fiber", 25)
            },
            "today_summary": today_summary_data
        }
        
        print(f"–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: avg_calories={avg_calories}, days_tracked={days_tracked}, adherence_percent={adherence_percent}")
        print(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ë–ñ–£: protein={protein_percent}%, fat={fat_percent}%, carb={carb_percent}%")
        print(f"–¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(top_products)} —à—Ç")
        
        return {"status": "success", "data": stats_data}
    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/recipes/{user_id}", response_model=Dict[str, Any])
async def get_recipes(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data
        except ImportError:
            return {"status": "success", "data": {"test": "mode"}}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipes_data = {
            "categories": ["–í—Å–µ", "–ó–∞–≤—Ç—Ä–∞–∫–∏", "–û–±–µ–¥—ã", "–£–∂–∏–Ω—ã", "–°–∞–ª–∞—Ç—ã", "–î–µ—Å–µ—Ä—Ç—ã"],
            "recipes": []
        }
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recepti_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "recepti.txt")
        
        # –ß—Ç–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        try:
            with open(recepti_path, "r", encoding="utf-8") as f:
                content = f.read()
                
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
            recipe_blocks = re.split(r'\n\s*\n', content)
            for block in recipe_blocks:
                if not block.strip():
                    continue
                    
                lines = block.strip().split('\n')
                if len(lines) < 3:
                    continue
                    
                title = lines[0].strip()
                category = "–û–±–µ–¥—ã"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if any(word in title.lower() for word in ["–∑–∞–≤—Ç—Ä–∞–∫", "–∫–∞—à–∞", "–æ–º–ª–µ—Ç", "—è–∏—á–Ω–∏—Ü–∞"]):
                    category = "–ó–∞–≤—Ç—Ä–∞–∫–∏"
                elif any(word in title.lower() for word in ["—Å–∞–ª–∞—Ç", "–∑–∞–∫—É—Å–∫–∞"]):
                    category = "–°–∞–ª–∞—Ç—ã"
                elif any(word in title.lower() for word in ["–¥–µ—Å–µ—Ä—Ç", "—Ç–æ—Ä—Ç", "–ø–∏—Ä–æ–≥", "—Å–ª–∞–¥–∫–æ–µ"]):
                    category = "–î–µ—Å–µ—Ä—Ç—ã"
                elif any(word in title.lower() for word in ["—É–∂–∏–Ω", "–ª–µ–≥–∫–æ–µ"]):
                    category = "–£–∂–∏–Ω—ã"
                
                # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                prep_time = "30 –º–∏–Ω"
                if "–±—ã—Å—Ç—Ä" in ' '.join(lines).lower():
                    prep_time = "15 –º–∏–Ω"
                elif "–¥–æ–ª–≥" in ' '.join(lines).lower() or "—á–∞—Å" in ' '.join(lines).lower():
                    prep_time = "60 –º–∏–Ω"
                
                # –û—Ü–µ–Ω–∫–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
                calories = 350  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if any(word in ' '.join(lines).lower() for word in ["–¥–∏–µ—Ç", "–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä", "–ª–µ–≥–∫"]):
                    calories = 250
                elif any(word in ' '.join(lines).lower() for word in ["—Å—ã—Ç–Ω", "–∂–∏—Ä–Ω", "–∫–∞–ª–æ—Ä–∏–π–Ω"]):
                    calories = 450
                
                # –û–ø–∏—Å–∞–Ω–∏–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                description = ' '.join(lines[1:min(4, len(lines))])
                if len(description) > 150:
                    description = description[:147] + "..."
                
                recipes_data["recipes"].append({
                    "title": title,
                    "category": category,
                    "prep_time": prep_time,
                    "calories": calories,
                    "description": description,
                    "portions": 2,
                    "nutrition": {
                        "calories": calories,
                        "protein": round(calories * 0.25 / 4),  # 25% –±–µ–ª–∫–æ–≤, 4 –∫–∫–∞–ª/–≥
                        "fat": round(calories * 0.3 / 9),       # 30% –∂–∏—Ä–æ–≤, 9 –∫–∫–∞–ª/–≥
                        "carb": round(calories * 0.45 / 4),     # 45% —É–≥–ª–µ–≤–æ–¥–æ–≤, 4 –∫–∫–∞–ª/–≥
                        "fiber": 5
                    }
                })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        
        return {"status": "success", "data": recipes_data}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


class MealData(BaseModel):
    user_id: str
    meal_name: str
    meal_time: str
    items: List[Dict[str, Any]]

@app.post("/api/meal", response_model=Dict[str, Any])
async def add_meal(meal_data: MealData, api_key: str = Depends(verify_api_key)):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    """
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "status": "success",
            "message": "–ü—Ä–∏–µ–º –ø–∏—â–∏ –¥–æ–±–∞–≤–ª–µ–Ω",
            "data": meal_data.dict()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/api/profile/{user_id}", response_model=Dict[str, Any])
async def get_user_profile(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data
        except ImportError:
            return {"status": "success", "data": {"test": "mode"}}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        
        return {"status": "success", "data": user_data}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.put("/api/profile/{user_id}", response_model=Dict[str, Any])
async def update_user_profile(user_id: str, profile_data: ProfileUpdateData, api_key: str = Depends(verify_api_key)):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data, update_user_data
        except ImportError:
            return {"status": "success", "message": "Test mode"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_data = await get_user_data(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        update_dict = profile_data.dict(exclude_unset=True)
        current_data.update(update_dict)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await update_user_data(user_id, current_data)
        
        return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω", "data": current_data}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@app.post("/api/profile/{user_id}/recalculate", response_model=Dict[str, Any])
async def recalculate_user_targets(user_id: str, api_key: str = Depends(verify_api_key)):
    """
    –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from bot import get_user_data, update_user_data
        except ImportError:
            return {"status": "success", "message": "Test mode"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await get_user_data(user_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        gender = data.get("gender")
        age = data.get("age")
        height = data.get("height")
        weight = data.get("weight")
        goal = data.get("goal")
        activity = data.get("activity")
        pregnant = data.get("pregnant", False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([gender, age, height, weight, goal, activity]):
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
        
        # –†–∞—Å—á–µ—Ç BMR (Mifflin-St Jeor)
        if gender == "–º—É–∂":
            bmr = 10 * weight + 6.25 * height - 5 * age + 5
        else:
            bmr = 10 * weight + 6.25 * height - 5 * age - 161
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        multipliers = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.3, "–≤—ã—Å–æ–∫–∏–π": 1.4}
        maintenance = bmr * multipliers.get(activity, 1.2)
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
        if pregnant:
            if goal == weight:
                target_calories = maintenance * 1.17
            elif goal < weight:
                target_calories = maintenance
            else:
                target_calories = maintenance * 1.34
        else:
            if goal == weight:
                target_calories = maintenance
            elif goal < weight:
                target_calories = maintenance * 0.83
            else:
                target_calories = maintenance * 1.17
        
        target_calories = max(1200, target_calories)
        
        # –†–∞—Å—á–µ—Ç –ë–ñ–£
        protein_grams = int((target_calories * 0.3) / 4)
        fat_grams = int((target_calories * 0.3) / 9)
        carbs_grams = int((target_calories * 0.4) / 4)
        fiber_grams = max(20, round(target_calories * 0.014))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data["target_kcal"] = int(target_calories)
        data["target_protein"] = protein_grams
        data["target_fat"] = fat_grams
        data["target_carb"] = carbs_grams
        data["target_fiber"] = fiber_grams
        
        await update_user_data(user_id, data)
        
        return {
            "status": "success", 
            "message": "–¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã",
            "data": {
                "target_kcal": int(target_calories),
                "target_protein": protein_grams,
                "target_fat": fat_grams,
                "target_carb": carbs_grams,
                "target_fiber": fiber_grams
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –ù–û–í–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–∞–º
@app.get("/api/diary-data/{user_id}")
async def get_diary_data(user_id: str, date_str: Optional[str] = None, api_key: str = Depends(verify_api_key)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
            sys.path.append(os.path.dirname(os.path.abspath(__file__)))
            from bot import get_user_data, get_history
        except ImportError as import_error:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py –≤ get_diary_data: {import_error}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ bot.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            target_date = date_str or datetime.now().strftime("%Y-%m-%d")
            return {
                "status": "success", 
                "data": {
                    "date": target_date,
                    "total_calories": 1650,
                    "total_protein": 85,
                    "total_fat": 55,
                    "total_carb": 190,
                    "total_fiber": 18.5,
                    "meals": [
                        {
                            "id": 1,
                            "time": "08:30",
                            "description": "–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –æ—Ä–µ—Ö–∞–º–∏",
                            "calories": 420,
                            "protein": 15,
                            "fat": 12,
                            "carb": 65,
                            "fiber": 8.2,
                            "items": [
                                {"name": "–û–≤—Å—è–Ω–∫–∞", "weight": "50–≥", "calories": 180},
                                {"name": "–ë–∞–Ω–∞–Ω", "weight": "120–≥", "calories": 108},
                                {"name": "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏", "weight": "20–≥", "calories": 132}
                            ]
                        },
                        {
                            "id": 2,
                            "time": "13:15",
                            "description": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏",
                            "calories": 580,
                            "protein": 45,
                            "fat": 8,
                            "carb": 75,
                            "fiber": 6.5,
                            "items": [
                                {"name": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", "weight": "150–≥", "calories": 248},
                                {"name": "–†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π", "weight": "100–≥", "calories": 130},
                                {"name": "–ë—Ä–æ–∫–∫–æ–ª–∏", "weight": "150–≥", "calories": 51},
                                {"name": "–ú–æ—Ä–∫–æ–≤—å", "weight": "100–≥", "calories": 41}
                            ]
                        },
                        {
                            "id": 3,
                            "time": "19:45",
                            "description": "–¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏",
                            "calories": 280,
                            "protein": 25,
                            "fat": 9,
                            "carb": 20,
                            "fiber": 3.8,
                            "items": [
                                {"name": "–¢–≤–æ—Ä–æ–≥ 5%", "weight": "150–≥", "calories": 180},
                                {"name": "–ß–µ—Ä–Ω–∏–∫–∞", "weight": "80–≥", "calories": 46},
                                {"name": "–ú–µ–¥", "weight": "15–≥", "calories": 54}
                            ]
                        }
                    ],
                    "targets": {
                        "calories": 2000,
                        "protein": 100,
                        "fat": 67,
                        "carb": 250,
                        "fiber": 25
                    },
                    "remaining": {
                        "calories": 350,
                        "protein": 15,
                        "fat": 12,
                        "carb": 60,
                        "fiber": 6.5
                    },
                    "message": "üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
                }
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(user_id)
        user_offset = user_data.get("utc_offset", 0)
        user_tz = timezone(timedelta(hours=user_offset))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if date_str:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        else:
            target_date = datetime.now(user_tz).date()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = await get_history(user_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        entries_today = [e for e in history if e["timestamp"].astimezone(user_tz).date() == target_date]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        target_kcal = int(user_data.get("target_kcal", 2000))
        target_protein = int(user_data.get("target_protein", 100))
        target_fat = int(user_data.get("target_fat", 67))
        target_carb = int(user_data.get("target_carb", 250))
        target_fiber = int(user_data.get("target_fiber", 25))
        
        if not entries_today:
            return {
                "status": "success", 
                "data": {
                    "date": target_date.strftime("%Y-%m-%d"),
                    "total_calories": 0,
                    "total_protein": 0,
                    "total_fat": 0,
                    "total_carb": 0,
                    "total_fiber": 0,
                    "meals": [],
                    "targets": {
                        "calories": target_kcal,
                        "protein": target_protein,
                        "fat": target_fat,
                        "carb": target_carb,
                        "fiber": target_fiber
                    },
                    "remaining": {
                        "calories": target_kcal,
                        "protein": target_protein,
                        "fat": target_fat,
                        "carb": target_carb,
                        "fiber": target_fiber
                    },
                    "message": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞."
                }
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        total_kcal = total_prot = total_fat = total_carb = total_fiber = 0.0
        meals = []
        
        for i, entry in enumerate(entries_today, start=1):
            kcal = prot = fat = carb = fiber = 0.0
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            match = re.search(
                r'–ò—Ç–æ–≥–æ:\s*[~‚âà]?\s*(\d+\.?\d*)\s*–∫–∫–∞–ª.*?'
                r'–ë–µ–ª–∫–∏[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                r'–ñ–∏—Ä—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                r'–£–≥–ª–µ–≤–æ–¥—ã[:\-]?\s*[~‚âà]?\s*(\d+\.?\d*)\s*–≥.*?'
                r'–ö–ª–µ—Ç—á–∞—Ç–∫–∞[:\-]?\s*([~‚âà]?\s*\d+\.?\d*)\s*–≥',
                entry['response'], flags=re.IGNORECASE | re.DOTALL
            )
            
            if match:
                kcal, prot, fat, carb = map(lambda x: round(float(x)), match.groups()[:4])
                fiber = round(float(match.groups()[4]), 1)
            
            total_kcal += kcal
            total_prot += prot
            total_fat += fat
            total_carb += carb
            total_fiber += fiber
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            lines = entry['response'].splitlines()
            food_lines = [line for line in lines if line.strip().startswith(("‚Ä¢", "-"))]
            
            # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            items = []
            for line in food_lines:
                clean_line = re.sub(r'^[‚Ä¢\-]\s*', '', line).strip()
                if "‚Äì" in clean_line:
                    parts = clean_line.split("‚Äì")
                    product_info = parts[0].strip()
                    nutrition_info = parts[1].strip() if len(parts) > 1 else ""
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞
                    weight_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–≥', product_info)
                    weight = weight_match.group(0) if weight_match else "100–≥"
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                    cal_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–∫–∫–∞–ª', nutrition_info)
                    product_calories = int(float(cal_match.group(1).replace(",", "."))) if cal_match else 0
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—É–±–∏—Ä–∞–µ–º –≤–µ—Å)
                    product_name = re.sub(r'\s*\d+(?:[.,]\d+)?\s*–≥.*', '', product_info).strip()
                    
                    items.append({
                        "name": product_name,
                        "weight": weight,
                        "calories": product_calories
                    })
            
            short_desc = ", ".join([re.sub(r'^[‚Ä¢\-]\s*', '', line).split("‚Äì")[0].strip() for line in food_lines]) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            
            meals.append({
                "id": i,
                "time": entry['timestamp'].strftime("%H:%M"),
                "description": short_desc,
                "calories": kcal,
                "protein": prot,
                "fat": fat,
                "carb": carb,
                "fiber": fiber,
                "items": items,
                "full_response": entry['response'],
                "timestamp": entry['timestamp'].isoformat()
            })
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        remaining_kcal = max(0, target_kcal - total_kcal)
        remaining_prot = max(0, target_protein - total_prot)
        remaining_fat = max(0, target_fat - total_fat)
        remaining_carb = max(0, target_carb - total_carb)
        remaining_fiber = max(0, target_fiber - total_fiber)
        
        diary_data = {
            "date": target_date.strftime("%Y-%m-%d"),
            "total_calories": int(total_kcal),
            "total_protein": int(total_prot),
            "total_fat": int(total_fat),
            "total_carb": int(total_carb),
            "total_fiber": round(total_fiber, 1),
            "meals": meals,
            "targets": {
                "calories": target_kcal,
                "protein": target_protein,
                "fat": target_fat,
                "carb": target_carb,
                "fiber": target_fiber
            },
            "remaining": {
                "calories": remaining_kcal,
                "protein": remaining_prot,
                "fat": remaining_fat,
                "carb": remaining_carb,
                "fiber": round(remaining_fiber, 1)
            }
        }
        
        return {"status": "success", "data": diary_data}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_diary_data: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)


@app.get("/api/daily-summary/{user_id}/{start_date}/{end_date}")
async def get_daily_summary(user_id: str, start_date: str, end_date: str):
    try:
        start = datetime.strptime(start_date, "%Y-%m-%d").date()
        end = datetime.strptime(end_date, "%Y-%m-%d").date()

        async with async_session() as session:
            result = await session.execute(
                select(History).where(
                    History.user_id == user_id,
                    History.date >= start,
                    History.date <= end
                )
            )
            entries = result.scalars().all()

        if not entries:
            return {"summary": "üì≠ –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."}

        daily_data = {}
        for entry in entries:
            entry_date = entry.date
            if entry_date not in daily_data:
                daily_data[entry_date] = {'kcal': 0, 'protein': 0, 'fat': 0, 'carb': 0, 'fiber': 0}
            
            match = re.search(r"(\d+(?:[.,]\d+)?) –∫–∫–∞–ª, –ë–µ–ª–∫–∏: (\d+(?:[.,]\d+)?) –≥, –ñ–∏—Ä—ã: (\d+(?:[.,]\d+)?) –≥, –£–≥–ª–µ–≤–æ–¥—ã: (\–¥+(?:[.,]\–¥+)?) –≥, –ö–ª–µ—Ç—á–∞—Ç–∫–∞: (\–¥+(?:[.,]\–¥+)?) –≥", entry.response)
            if match:
                kcal, prot, fat, carb, fiber = map(lambda x: float(x.replace(',', '.')), match.groups())
                daily_data[entry_date]['kcal'] += kcal
                daily_data[entry_date]['protein'] += prot
                daily_data[entry_date]['fat'] += fat
                daily_data[entry_date]['carb'] += carb
                daily_data[entry_date]['fiber'] += fiber
        
        return {
            "daily_data": daily_data,
            "average": {
                "kcal": round(sum(d['kcal'] for d in daily_data.values()) / len(daily_data)),
                "protein": round(sum(d['protein'] for d in daily_data.values()) / len(daily_data)),
                "fat": round(sum(d['fat'] for d in daily_data.values()) / len(daily_data)),
                "carb": round(sum(d['carb'] for d in daily_data.values()) / len(daily_data)),
                "fiber": round(sum(d['fiber'] for d in daily_data.values()) / len(daily_data)),
            },
            "days_tracked": len(daily_data)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
