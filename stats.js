/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–æ–º "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –∏—Ç–æ–≥–∏ –¥–Ω—è, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ë–ñ–£ –∏ —Ç–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function initStatsSection() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    // –ü–æ–ª—É—á–∞–µ–º userId
    const userId = getUserId();
    if (!userId) {
        showStatsError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    loadStatsData(userId);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStatsData(userId) {
    try {
        const statsContent = document.getElementById('stats-content');
        statsContent.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
            </div>
        `;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ API
        const statsData = await apiClient.getStats(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
        const diaryData = await apiClient.getDiary(userId);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        renderStatsData(statsData, diaryData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        showStatsError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function renderStatsData(statsData, diaryData) {
    const statsContent = document.getElementById('stats-content');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0]; // YYYY-MM-DD
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
    const todayData = diaryData.days.find(day => {
        const dayDate = new Date(day.date.split('.').reverse().join('-'));
        return dayDate.toISOString().split('T')[0] === todayStr;
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let html = `
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>üìÖ –ò—Ç–æ–≥–∏ –¥–Ω—è</span>
                        <div class="btn-group">
                            <button id="prev-day-btn" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <button id="today-btn" class="btn btn-sm btn-primary">–°–µ–≥–æ–¥–Ω—è</button>
                            <button id="next-day-btn" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body" id="daily-summary">
                        ${renderDailySummary(todayData, statsData.user_targets)}
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                    <div class="card-body">
                        ${renderGeneralStats(statsData.general)}
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">ü•© –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ë–ñ–£</div>
                    <div class="card-body">
                        ${renderNutritionDistribution(statsData.nutrition_distribution)}
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">üçé –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç—ã</div>
                    <div class="card-body">
                        ${renderTopProducts(statsData.top_products)}
                    </div>
                </div>
            </div>
        </div>
    `;
    
    statsContent.innerHTML = html;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    initDayNavigation(diaryData, statsData.user_targets);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    initCharts(statsData);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
function renderDailySummary(dayData, targets) {
    if (!dayData) {
        return `
            <div class="text-center py-4">
                <div class="mb-3">
                    <i class="fas fa-calendar-day fa-3x text-muted"></i>
                </div>
                <h5>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è</h5>
                <p class="text-muted">–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–∏ –¥–Ω—è</p>
            </div>
        `;
    }
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const caloriesPercent = Math.min(100, Math.round((dayData.total_calories / targets.calories) * 100));
    
    // –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏–∑ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    let totalProtein = 0;
    let totalFat = 0;
    let totalCarb = 0;
    let totalFiber = 0;
    
    dayData.meals.forEach(meal => {
        // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –ø–æ –ë–ñ–£, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const mealCalories = meal.calories;
        totalProtein += Math.round(mealCalories * 0.25 / 4); // 25% –±–µ–ª–∫–æ–≤, 4 –∫–∫–∞–ª/–≥
        totalFat += Math.round(mealCalories * 0.3 / 9);      // 30% –∂–∏—Ä–æ–≤, 9 –∫–∫–∞–ª/–≥
        totalCarb += Math.round(mealCalories * 0.45 / 4);    // 45% —É–≥–ª–µ–≤–æ–¥–æ–≤, 4 –∫–∫–∞–ª/–≥
        totalFiber += 2; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    });
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const proteinPercent = Math.min(100, Math.round((totalProtein / targets.protein) * 100));
    const fatPercent = Math.min(100, Math.round((totalFat / targets.fat) * 100));
    const carbPercent = Math.min(100, Math.round((totalCarb / targets.carb) * 100));
    const fiberPercent = Math.min(100, Math.round((totalFiber / targets.fiber) * 100));
    
    return `
        <h5 class="mb-3">${formatDate(dayData.date)}</h5>
        
        <div class="mb-3">
            <div class="d-flex justify-content-between mb-1">
                <span>–ö–∞–ª–æ—Ä–∏–∏</span>
                <span>${dayData.total_calories} / ${targets.calories} –∫–∫–∞–ª</span>
            </div>
            <div class="progress" style="height: 10px;">
                <div class="progress-bar bg-primary" role="progressbar" style="width: ${caloriesPercent}%" 
                    aria-valuenow="${caloriesPercent}" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
        
        <div class="mb-3">
            <div class="d-flex justify-content-between mb-1">
                <span>–ë–µ–ª–∫–∏</span>
                <span>${totalProtein} / ${targets.protein} –≥</span>
            </div>
            <div class="progress" style="height: 8px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: ${proteinPercent}%" 
                    aria-valuenow="${proteinPercent}" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
        
        <div class="mb-3">
            <div class="d-flex justify-content-between mb-1">
                <span>–ñ–∏—Ä—ã</span>
                <span>${totalFat} / ${targets.fat} –≥</span>
            </div>
            <div class="progress" style="height: 8px;">
                <div class="progress-bar bg-warning" role="progressbar" style="width: ${fatPercent}%" 
                    aria-valuenow="${fatPercent}" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
        
        <div class="mb-3">
            <div class="d-flex justify-content-between mb-1">
                <span>–£–≥–ª–µ–≤–æ–¥—ã</span>
                <span>${totalCarb} / ${targets.carb} –≥</span>
            </div>
            <div class="progress" style="height: 8px;">
                <div class="progress-bar bg-info" role="progressbar" style="width: ${carbPercent}%" 
                    aria-valuenow="${carbPercent}" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
        
        <div class="mb-3">
            <div class="d-flex justify-content-between mb-1">
                <span>–ö–ª–µ—Ç—á–∞—Ç–∫–∞</span>
                <span>${totalFiber} / ${targets.fiber} –≥</span>
            </div>
            <div class="progress" style="height: 8px;">
                <div class="progress-bar bg-secondary" role="progressbar" style="width: ${fiberPercent}%" 
                    aria-valuenow="${fiberPercent}" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
        
        <div class="mt-3">
            <h6>–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:</h6>
            <ul class="list-group">
                ${dayData.meals.map(meal => `
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <span class="fw-bold">${meal.name}</span>
                            <small class="text-muted d-block">${meal.time}</small>
                        </div>
                        <span class="badge bg-primary rounded-pill">${meal.calories} –∫–∫–∞–ª</span>
                    </li>
                `).join('')}
            </ul>
        </div>
    `;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function renderGeneralStats(generalStats) {
    return `
        <div class="row">
            <div class="col-6 col-md-3 mb-3">
                <div class="text-center">
                    <h3>${generalStats.avg_calories}</h3>
                    <small class="text-muted">–°—Ä–µ–¥–Ω–∏–µ –∫–∫–∞–ª/–¥–µ–Ω—å</small>
                </div>
            </div>
            <div class="col-6 col-md-3 mb-3">
                <div class="text-center">
                    <h3>${generalStats.days_tracked}</h3>
                    <small class="text-muted">–î–Ω–µ–π –æ—Ç—Å–ª–µ–∂–µ–Ω–æ</small>
                </div>
            </div>
            <div class="col-6 col-md-3 mb-3">
                <div class="text-center">
                    <h3>${generalStats.adherence_percent}%</h3>
                    <small class="text-muted">–°–æ–±–ª—é–¥–µ–Ω–∏–µ –Ω–æ—Ä–º—ã</small>
                </div>
            </div>
            <div class="col-6 col-md-3 mb-3">
                <div class="text-center">
                    <h3>${generalStats.weight_change > 0 ? '+' : ''}${generalStats.weight_change} –∫–≥</h3>
                    <small class="text-muted">–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞</small>
                </div>
            </div>
        </div>
    `;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ë–ñ–£
function renderNutritionDistribution(distribution) {
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    const chartData = {
        protein: distribution.protein,
        fat: distribution.fat,
        carb: distribution.carb
    };
    
    return `
        <div class="row align-items-center">
            <div class="col-md-6 mb-3">
                <div id="nutrition-chart" style="height: 200px;"></div>
            </div>
            <div class="col-md-6">
                <div class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span><i class="fas fa-circle text-success"></i> –ë–µ–ª–∫–∏</span>
                        <span>${distribution.protein}%</span>
                    </div>
                </div>
                <div class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span><i class="fas fa-circle text-warning"></i> –ñ–∏—Ä—ã</span>
                        <span>${distribution.fat}%</span>
                    </div>
                </div>
                <div class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span><i class="fas fa-circle text-info"></i> –£–≥–ª–µ–≤–æ–¥—ã</span>
                        <span>${distribution.carb}%</span>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function renderTopProducts(products) {
    if (!products || products.length === 0) {
        return `
            <div class="text-center py-3">
                <p class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö</p>
            </div>
        `;
    }
    
    return `
        <ul class="list-group">
            ${products.map((product, index) => `
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <span class="fw-bold">${index + 1}. ${product.name}</span>
                    </div>
                    <span class="badge bg-primary rounded-pill">${product.count} —Ä–∞–∑</span>
                </li>
            `).join('')}
        </ul>
    `;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
function initDayNavigation(diaryData, targets) {
    const prevDayBtn = document.getElementById('prev-day-btn');
    const nextDayBtn = document.getElementById('next-day-btn');
    const todayBtn = document.getElementById('today-btn');
    const dailySummary = document.getElementById('daily-summary');
    
    // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–Ω—è –≤ –º–∞—Å—Å–∏–≤–µ –¥–Ω–µ–π
    let currentDayIndex = 0;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å"
    prevDayBtn.addEventListener('click', () => {
        if (currentDayIndex < diaryData.days.length - 1) {
            currentDayIndex++;
            updateDailySummary();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"
    nextDayBtn.addEventListener('click', () => {
        if (currentDayIndex > 0) {
            currentDayIndex--;
            updateDailySummary();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
    todayBtn.addEventListener('click', () => {
        currentDayIndex = 0;
        updateDailySummary();
    });
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
    function updateDailySummary() {
        const dayData = diaryData.days[currentDayIndex];
        dailySummary.innerHTML = renderDailySummary(dayData, targets);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        prevDayBtn.disabled = currentDayIndex >= diaryData.days.length - 1;
        nextDayBtn.disabled = currentDayIndex <= 0;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
function initCharts(statsData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Chart.js
    if (typeof Chart === 'undefined') {
        // –ï—Å–ª–∏ Chart.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
        script.onload = () => createNutritionChart(statsData.nutrition_distribution);
        document.head.appendChild(script);
    } else {
        // –ï—Å–ª–∏ Chart.js —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        createNutritionChart(statsData.nutrition_distribution);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ë–ñ–£
function createNutritionChart(distribution) {
    const chartElement = document.getElementById('nutrition-chart');
    if (!chartElement) return;
    
    // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    chartElement.innerHTML = '<canvas></canvas>';
    const ctx = chartElement.querySelector('canvas').getContext('2d');
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['–ë–µ–ª–∫–∏', '–ñ–∏—Ä—ã', '–£–≥–ª–µ–≤–æ–¥—ã'],
            datasets: [{
                data: [distribution.protein, distribution.fat, distribution.carb],
                backgroundColor: ['#28a745', '#ffc107', '#17a2b8'],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function showStatsError(message) {
    const statsContent = document.getElementById('stats-content');
    statsContent.innerHTML = `
        <div class="error-message">
            <i class="fas fa-exclamation-circle"></i> ${message}
        </div>
    `;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã (DD.MM.YYYY -> "DD –º–µ—Å—è—Ü YYYY")
function formatDate(dateStr) {
    const months = [
        '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    
    const parts = dateStr.split('.');
    if (parts.length !== 3) return dateStr;
    
    const day = parseInt(parts[0]);
    const month = parseInt(parts[1]) - 1;
    const year = parseInt(parts[2]);
    
    return `${day} ${months[month]} ${year}`;
}
